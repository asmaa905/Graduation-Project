
final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003270  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  00003270  00003304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000e0  008000e0  00003384  2**0
                  ALLOC
  3 .stab         00002a54  00000000  00000000  00003384  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f9a  00000000  00000000  00005dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007022  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009b56  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a904  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000aa64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000acf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b4bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__vector_10>
      2c:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ee       	ldi	r26, 0xE0	; 224
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3f       	cpi	r26, 0xF4	; 244
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <main>
      8a:	0c 94 36 19 	jmp	0x326c	; 0x326c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ff 18 	jmp	0x31fe	; 0x31fe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ec       	ldi	r26, 0xC6	; 198
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1b 19 	jmp	0x3236	; 0x3236 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0b 19 	jmp	0x3216	; 0x3216 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 27 19 	jmp	0x324e	; 0x324e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0b 19 	jmp	0x3216	; 0x3216 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 27 19 	jmp	0x324e	; 0x324e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ff 18 	jmp	0x31fe	; 0x31fe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ec       	ldi	r24, 0xC6	; 198
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1b 19 	jmp	0x3236	; 0x3236 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0b 19 	jmp	0x3216	; 0x3216 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 27 19 	jmp	0x324e	; 0x324e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0b 19 	jmp	0x3216	; 0x3216 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 27 19 	jmp	0x324e	; 0x324e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0b 19 	jmp	0x3216	; 0x3216 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 27 19 	jmp	0x324e	; 0x324e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0f 19 	jmp	0x321e	; 0x321e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2b 19 	jmp	0x3256	; 0x3256 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit_interrupt>:
static u16 *ADC_ptr = NULL ;



void ADC_voidInit_interrupt(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	//select Vref = Vcc
    SET_BIT(ADMUX,REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
    CLR_BIT(ADMUX,REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24

	//Right adjust
    CLR_BIT(ADMUX,ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24

	//Trigger enable
	//SET_BIT(ADCSRA,ADATE);

    //select prescaler =64
	CLR_BIT(ADCSRA,ADPS0);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8e 7f       	andi	r24, 0xFE	; 254
     b84:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	84 60       	ori	r24, 0x04	; 4
     ba0:	8c 93       	st	X, r24

	//ADC peripheral enable
    SET_BIT(ADCSRA,ADEN);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24

    //ADC interrupt enable
    SET_BIT(ADCSRA,ADIE);
     bb0:	a6 e2       	ldi	r26, 0x26	; 38
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e6 e2       	ldi	r30, 0x26	; 38
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	88 60       	ori	r24, 0x08	; 8
     bbc:	8c 93       	st	X, r24
   // CLR_BIT(SFIOR,ADTS2);

    // start conversion
   //  SET_BIT(ADCSRA,ADSC);

}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <ADC_voidGetDigitalValue>:
void ADC_voidGetDigitalValue(u8 COPY_u8Channel , u16  *COPY_Pu16DigitalValue)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	00 d0       	rcall	.+0      	; 0xbca <ADC_voidGetDigitalValue+0x6>
     bca:	0f 92       	push	r0
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	89 83       	std	Y+1, r24	; 0x01
     bd2:	7b 83       	std	Y+3, r23	; 0x03
     bd4:	6a 83       	std	Y+2, r22	; 0x02
	
	if (COPY_u8Channel >= 0  &&  COPY_u8Channel <=7)
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	88 30       	cpi	r24, 0x08	; 8
     bda:	e0 f4       	brcc	.+56     	; 0xc14 <ADC_voidGetDigitalValue+0x50>
	{
	   ADMUX &= ADMUX_CHANNELS_CLR ;
     bdc:	a7 e2       	ldi	r26, 0x27	; 39
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e7 e2       	ldi	r30, 0x27	; 39
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	80 7e       	andi	r24, 0xE0	; 224
     be8:	8c 93       	st	X, r24
	   ADMUX |= COPY_u8Channel   ;
     bea:	a7 e2       	ldi	r26, 0x27	; 39
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e7 e2       	ldi	r30, 0x27	; 39
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	90 81       	ld	r25, Z
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	89 2b       	or	r24, r25
     bf8:	8c 93       	st	X, r24
	   
	   ADC_ptr=COPY_Pu16DigitalValue;
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	9b 81       	ldd	r25, Y+3	; 0x03
     bfe:	90 93 e3 00 	sts	0x00E3, r25
     c02:	80 93 e2 00 	sts	0x00E2, r24
	   // start conversion
       SET_BIT(ADCSRA,ADSC);
     c06:	a6 e2       	ldi	r26, 0x26	; 38
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e6 e2       	ldi	r30, 0x26	; 38
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	80 64       	ori	r24, 0x40	; 64
     c12:	8c 93       	st	X, r24
	   
	}

   // return ADC;
	
}
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <ADC_SetCallBack>:



void  ADC_SetCallBack (void(*pf) (void))
{
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	00 d0       	rcall	.+0      	; 0xc26 <ADC_SetCallBack+0x6>
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	9a 83       	std	Y+2, r25	; 0x02
     c2c:	89 83       	std	Y+1, r24	; 0x01
	ADC_callBack=pf;
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	9a 81       	ldd	r25, Y+2	; 0x02
     c32:	90 93 e1 00 	sts	0x00E1, r25
     c36:	80 93 e0 00 	sts	0x00E0, r24
}
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	cf 91       	pop	r28
     c40:	df 91       	pop	r29
     c42:	08 95       	ret

00000c44 <__vector_16>:
void  __vector_16 (void) __attribute__((signal,used));

void  __vector_16 (void)
{
     c44:	1f 92       	push	r1
     c46:	0f 92       	push	r0
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	0f 92       	push	r0
     c4c:	11 24       	eor	r1, r1
     c4e:	2f 93       	push	r18
     c50:	3f 93       	push	r19
     c52:	4f 93       	push	r20
     c54:	5f 93       	push	r21
     c56:	6f 93       	push	r22
     c58:	7f 93       	push	r23
     c5a:	8f 93       	push	r24
     c5c:	9f 93       	push	r25
     c5e:	af 93       	push	r26
     c60:	bf 93       	push	r27
     c62:	ef 93       	push	r30
     c64:	ff 93       	push	r31
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
	*ADC_ptr = ADC;
     c6e:	a0 91 e2 00 	lds	r26, 0x00E2
     c72:	b0 91 e3 00 	lds	r27, 0x00E3
     c76:	e4 e2       	ldi	r30, 0x24	; 36
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	91 81       	ldd	r25, Z+1	; 0x01
     c7e:	8d 93       	st	X+, r24
     c80:	9c 93       	st	X, r25
	ADC_callBack();
     c82:	e0 91 e0 00 	lds	r30, 0x00E0
     c86:	f0 91 e1 00 	lds	r31, 0x00E1
     c8a:	09 95       	icall
}
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	ff 91       	pop	r31
     c92:	ef 91       	pop	r30
     c94:	bf 91       	pop	r27
     c96:	af 91       	pop	r26
     c98:	9f 91       	pop	r25
     c9a:	8f 91       	pop	r24
     c9c:	7f 91       	pop	r23
     c9e:	6f 91       	pop	r22
     ca0:	5f 91       	pop	r21
     ca2:	4f 91       	pop	r20
     ca4:	3f 91       	pop	r19
     ca6:	2f 91       	pop	r18
     ca8:	0f 90       	pop	r0
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	0f 90       	pop	r0
     cae:	1f 90       	pop	r1
     cb0:	18 95       	reti

00000cb2 <DIO_voidSetPinDirection>:
/*					 Inputs : Copy_u8PORT , Copy_u8PIN ,		*/
/*								Copy_u8Direction	 			*/
/*					 return : void		 						*/
/****************************************************************/
void	DIO_voidSetPinDirection	(	u8 Copy_u8PORT , u8 Copy_u8PIN ,	u8 Copy_u8Direction	)
{
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	27 97       	sbiw	r28, 0x07	; 7
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	89 83       	std	Y+1, r24	; 0x01
     cc8:	6a 83       	std	Y+2, r22	; 0x02
     cca:	4b 83       	std	Y+3, r20	; 0x03
	/*	Range check	*/
	if( (Copy_u8PORT <4 ) && (Copy_u8PIN < 8))
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	84 30       	cpi	r24, 0x04	; 4
     cd0:	08 f0       	brcs	.+2      	; 0xcd4 <DIO_voidSetPinDirection+0x22>
     cd2:	ee c0       	rjmp	.+476    	; 0xeb0 <DIO_voidSetPinDirection+0x1fe>
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	88 30       	cpi	r24, 0x08	; 8
     cd8:	08 f0       	brcs	.+2      	; 0xcdc <DIO_voidSetPinDirection+0x2a>
     cda:	ea c0       	rjmp	.+468    	; 0xeb0 <DIO_voidSetPinDirection+0x1fe>
	{
		if(Copy_u8Direction == OUTPUT)
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	09 f0       	breq	.+2      	; 0xce4 <DIO_voidSetPinDirection+0x32>
     ce2:	6f c0       	rjmp	.+222    	; 0xdc2 <DIO_voidSetPinDirection+0x110>
		{
			switch(Copy_u8PORT)
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	3f 83       	std	Y+7, r19	; 0x07
     cec:	2e 83       	std	Y+6, r18	; 0x06
     cee:	8e 81       	ldd	r24, Y+6	; 0x06
     cf0:	9f 81       	ldd	r25, Y+7	; 0x07
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	91 05       	cpc	r25, r1
     cf6:	49 f1       	breq	.+82     	; 0xd4a <DIO_voidSetPinDirection+0x98>
     cf8:	2e 81       	ldd	r18, Y+6	; 0x06
     cfa:	3f 81       	ldd	r19, Y+7	; 0x07
     cfc:	22 30       	cpi	r18, 0x02	; 2
     cfe:	31 05       	cpc	r19, r1
     d00:	2c f4       	brge	.+10     	; 0xd0c <DIO_voidSetPinDirection+0x5a>
     d02:	8e 81       	ldd	r24, Y+6	; 0x06
     d04:	9f 81       	ldd	r25, Y+7	; 0x07
     d06:	00 97       	sbiw	r24, 0x00	; 0
     d08:	61 f0       	breq	.+24     	; 0xd22 <DIO_voidSetPinDirection+0x70>
     d0a:	d2 c0       	rjmp	.+420    	; 0xeb0 <DIO_voidSetPinDirection+0x1fe>
     d0c:	2e 81       	ldd	r18, Y+6	; 0x06
     d0e:	3f 81       	ldd	r19, Y+7	; 0x07
     d10:	22 30       	cpi	r18, 0x02	; 2
     d12:	31 05       	cpc	r19, r1
     d14:	71 f1       	breq	.+92     	; 0xd72 <DIO_voidSetPinDirection+0xc0>
     d16:	8e 81       	ldd	r24, Y+6	; 0x06
     d18:	9f 81       	ldd	r25, Y+7	; 0x07
     d1a:	83 30       	cpi	r24, 0x03	; 3
     d1c:	91 05       	cpc	r25, r1
     d1e:	e9 f1       	breq	.+122    	; 0xd9a <DIO_voidSetPinDirection+0xe8>
     d20:	c7 c0       	rjmp	.+398    	; 0xeb0 <DIO_voidSetPinDirection+0x1fe>
			{
			case PORTA :	SET_BIT(DDRA_REG , Copy_u8PIN); break;
     d22:	aa e3       	ldi	r26, 0x3A	; 58
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	ea e3       	ldi	r30, 0x3A	; 58
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	48 2f       	mov	r20, r24
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	02 2e       	mov	r0, r18
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <DIO_voidSetPinDirection+0x8e>
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	0a 94       	dec	r0
     d42:	e2 f7       	brpl	.-8      	; 0xd3c <DIO_voidSetPinDirection+0x8a>
     d44:	84 2b       	or	r24, r20
     d46:	8c 93       	st	X, r24
     d48:	b3 c0       	rjmp	.+358    	; 0xeb0 <DIO_voidSetPinDirection+0x1fe>
			case PORTB :	SET_BIT(DDRB_REG , Copy_u8PIN); break;
     d4a:	a7 e3       	ldi	r26, 0x37	; 55
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e7 e3       	ldi	r30, 0x37	; 55
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	48 2f       	mov	r20, r24
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	02 2e       	mov	r0, r18
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <DIO_voidSetPinDirection+0xb6>
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	0a 94       	dec	r0
     d6a:	e2 f7       	brpl	.-8      	; 0xd64 <DIO_voidSetPinDirection+0xb2>
     d6c:	84 2b       	or	r24, r20
     d6e:	8c 93       	st	X, r24
     d70:	9f c0       	rjmp	.+318    	; 0xeb0 <DIO_voidSetPinDirection+0x1fe>
			case PORTC :	SET_BIT(DDRC_REG , Copy_u8PIN); break;
     d72:	a4 e3       	ldi	r26, 0x34	; 52
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e4 e3       	ldi	r30, 0x34	; 52
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	48 2f       	mov	r20, r24
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 2e       	mov	r0, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <DIO_voidSetPinDirection+0xde>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <DIO_voidSetPinDirection+0xda>
     d94:	84 2b       	or	r24, r20
     d96:	8c 93       	st	X, r24
     d98:	8b c0       	rjmp	.+278    	; 0xeb0 <DIO_voidSetPinDirection+0x1fe>
			case PORTD :	SET_BIT(DDRD_REG , Copy_u8PIN); break;
     d9a:	a1 e3       	ldi	r26, 0x31	; 49
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e1 e3       	ldi	r30, 0x31	; 49
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	48 2f       	mov	r20, r24
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	02 2e       	mov	r0, r18
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <DIO_voidSetPinDirection+0x106>
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	0a 94       	dec	r0
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <DIO_voidSetPinDirection+0x102>
     dbc:	84 2b       	or	r24, r20
     dbe:	8c 93       	st	X, r24
     dc0:	77 c0       	rjmp	.+238    	; 0xeb0 <DIO_voidSetPinDirection+0x1fe>
			}
		}
		else if(Copy_u8Direction == INPUT)
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	88 23       	and	r24, r24
     dc6:	09 f0       	breq	.+2      	; 0xdca <DIO_voidSetPinDirection+0x118>
     dc8:	73 c0       	rjmp	.+230    	; 0xeb0 <DIO_voidSetPinDirection+0x1fe>
		{
			switch(Copy_u8PORT)
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	3d 83       	std	Y+5, r19	; 0x05
     dd2:	2c 83       	std	Y+4, r18	; 0x04
     dd4:	8c 81       	ldd	r24, Y+4	; 0x04
     dd6:	9d 81       	ldd	r25, Y+5	; 0x05
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	91 05       	cpc	r25, r1
     ddc:	59 f1       	breq	.+86     	; 0xe34 <DIO_voidSetPinDirection+0x182>
     dde:	2c 81       	ldd	r18, Y+4	; 0x04
     de0:	3d 81       	ldd	r19, Y+5	; 0x05
     de2:	22 30       	cpi	r18, 0x02	; 2
     de4:	31 05       	cpc	r19, r1
     de6:	2c f4       	brge	.+10     	; 0xdf2 <DIO_voidSetPinDirection+0x140>
     de8:	8c 81       	ldd	r24, Y+4	; 0x04
     dea:	9d 81       	ldd	r25, Y+5	; 0x05
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	69 f0       	breq	.+26     	; 0xe0a <DIO_voidSetPinDirection+0x158>
     df0:	5f c0       	rjmp	.+190    	; 0xeb0 <DIO_voidSetPinDirection+0x1fe>
     df2:	2c 81       	ldd	r18, Y+4	; 0x04
     df4:	3d 81       	ldd	r19, Y+5	; 0x05
     df6:	22 30       	cpi	r18, 0x02	; 2
     df8:	31 05       	cpc	r19, r1
     dfa:	89 f1       	breq	.+98     	; 0xe5e <DIO_voidSetPinDirection+0x1ac>
     dfc:	8c 81       	ldd	r24, Y+4	; 0x04
     dfe:	9d 81       	ldd	r25, Y+5	; 0x05
     e00:	83 30       	cpi	r24, 0x03	; 3
     e02:	91 05       	cpc	r25, r1
     e04:	09 f4       	brne	.+2      	; 0xe08 <DIO_voidSetPinDirection+0x156>
     e06:	40 c0       	rjmp	.+128    	; 0xe88 <DIO_voidSetPinDirection+0x1d6>
     e08:	53 c0       	rjmp	.+166    	; 0xeb0 <DIO_voidSetPinDirection+0x1fe>
			{
			case PORTA :	CLR_BIT(DDRA_REG , Copy_u8PIN); break;
     e0a:	aa e3       	ldi	r26, 0x3A	; 58
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	ea e3       	ldi	r30, 0x3A	; 58
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_voidSetPinDirection+0x176>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <DIO_voidSetPinDirection+0x172>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	3e c0       	rjmp	.+124    	; 0xeb0 <DIO_voidSetPinDirection+0x1fe>
			case PORTB :	CLR_BIT(DDRB_REG , Copy_u8PIN); break;
     e34:	a7 e3       	ldi	r26, 0x37	; 55
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e7 e3       	ldi	r30, 0x37	; 55
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <DIO_voidSetPinDirection+0x1a0>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <DIO_voidSetPinDirection+0x19c>
     e56:	80 95       	com	r24
     e58:	84 23       	and	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	29 c0       	rjmp	.+82     	; 0xeb0 <DIO_voidSetPinDirection+0x1fe>
			case PORTC :	CLR_BIT(DDRC_REG , Copy_u8PIN); break;
     e5e:	a4 e3       	ldi	r26, 0x34	; 52
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e4 e3       	ldi	r30, 0x34	; 52
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	48 2f       	mov	r20, r24
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 2e       	mov	r0, r18
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <DIO_voidSetPinDirection+0x1ca>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	0a 94       	dec	r0
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <DIO_voidSetPinDirection+0x1c6>
     e80:	80 95       	com	r24
     e82:	84 23       	and	r24, r20
     e84:	8c 93       	st	X, r24
     e86:	14 c0       	rjmp	.+40     	; 0xeb0 <DIO_voidSetPinDirection+0x1fe>
			case PORTD :	CLR_BIT(DDRD_REG , Copy_u8PIN); break;
     e88:	a1 e3       	ldi	r26, 0x31	; 49
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e1 e3       	ldi	r30, 0x31	; 49
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	48 2f       	mov	r20, r24
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	02 2e       	mov	r0, r18
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <DIO_voidSetPinDirection+0x1f4>
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	0a 94       	dec	r0
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <DIO_voidSetPinDirection+0x1f0>
     eaa:	80 95       	com	r24
     eac:	84 23       	and	r24, r20
     eae:	8c 93       	st	X, r24
		{/*		Do nothing		*/}

	}
	else
	{/*		Do nothing			*/}
}
     eb0:	27 96       	adiw	r28, 0x07	; 7
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <DIO_voidSetPinValue>:
/*					 Inputs : Copy_u8PORT , Copy_u8PIN ,		*/
/*								Copy_u8Direction	 			*/
/*					 return : void		 						*/
/****************************************************************/
void DIO_voidSetPinValue(u8 Copy_u8PORT , u8 Copy_u8PIN ,u8 Copy_u8Value)
{
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	27 97       	sbiw	r28, 0x07	; 7
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	cd bf       	out	0x3d, r28	; 61
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	6a 83       	std	Y+2, r22	; 0x02
     eda:	4b 83       	std	Y+3, r20	; 0x03
	/*	Range check	*/
	if( (Copy_u8PORT <4 ) && (Copy_u8PIN < 8))
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	84 30       	cpi	r24, 0x04	; 4
     ee0:	08 f0       	brcs	.+2      	; 0xee4 <DIO_voidSetPinValue+0x22>
     ee2:	ee c0       	rjmp	.+476    	; 0x10c0 <DIO_voidSetPinValue+0x1fe>
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	88 30       	cpi	r24, 0x08	; 8
     ee8:	08 f0       	brcs	.+2      	; 0xeec <DIO_voidSetPinValue+0x2a>
     eea:	ea c0       	rjmp	.+468    	; 0x10c0 <DIO_voidSetPinValue+0x1fe>
	{
		if(Copy_u8Value == HIGH)
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	09 f0       	breq	.+2      	; 0xef4 <DIO_voidSetPinValue+0x32>
     ef2:	6f c0       	rjmp	.+222    	; 0xfd2 <DIO_voidSetPinValue+0x110>
		{
			switch(Copy_u8PORT)
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	3f 83       	std	Y+7, r19	; 0x07
     efc:	2e 83       	std	Y+6, r18	; 0x06
     efe:	8e 81       	ldd	r24, Y+6	; 0x06
     f00:	9f 81       	ldd	r25, Y+7	; 0x07
     f02:	81 30       	cpi	r24, 0x01	; 1
     f04:	91 05       	cpc	r25, r1
     f06:	49 f1       	breq	.+82     	; 0xf5a <DIO_voidSetPinValue+0x98>
     f08:	2e 81       	ldd	r18, Y+6	; 0x06
     f0a:	3f 81       	ldd	r19, Y+7	; 0x07
     f0c:	22 30       	cpi	r18, 0x02	; 2
     f0e:	31 05       	cpc	r19, r1
     f10:	2c f4       	brge	.+10     	; 0xf1c <DIO_voidSetPinValue+0x5a>
     f12:	8e 81       	ldd	r24, Y+6	; 0x06
     f14:	9f 81       	ldd	r25, Y+7	; 0x07
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	61 f0       	breq	.+24     	; 0xf32 <DIO_voidSetPinValue+0x70>
     f1a:	d2 c0       	rjmp	.+420    	; 0x10c0 <DIO_voidSetPinValue+0x1fe>
     f1c:	2e 81       	ldd	r18, Y+6	; 0x06
     f1e:	3f 81       	ldd	r19, Y+7	; 0x07
     f20:	22 30       	cpi	r18, 0x02	; 2
     f22:	31 05       	cpc	r19, r1
     f24:	71 f1       	breq	.+92     	; 0xf82 <DIO_voidSetPinValue+0xc0>
     f26:	8e 81       	ldd	r24, Y+6	; 0x06
     f28:	9f 81       	ldd	r25, Y+7	; 0x07
     f2a:	83 30       	cpi	r24, 0x03	; 3
     f2c:	91 05       	cpc	r25, r1
     f2e:	e9 f1       	breq	.+122    	; 0xfaa <DIO_voidSetPinValue+0xe8>
     f30:	c7 c0       	rjmp	.+398    	; 0x10c0 <DIO_voidSetPinValue+0x1fe>
			{
			case PORTA : SET_BIT(PORTA_REG,Copy_u8PIN);	break;
     f32:	ab e3       	ldi	r26, 0x3B	; 59
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	eb e3       	ldi	r30, 0x3B	; 59
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	48 2f       	mov	r20, r24
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 2e       	mov	r0, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <DIO_voidSetPinValue+0x8e>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	0a 94       	dec	r0
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <DIO_voidSetPinValue+0x8a>
     f54:	84 2b       	or	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	b3 c0       	rjmp	.+358    	; 0x10c0 <DIO_voidSetPinValue+0x1fe>
			case PORTB : SET_BIT(PORTB_REG,Copy_u8PIN);	break;
     f5a:	a8 e3       	ldi	r26, 0x38	; 56
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e8 e3       	ldi	r30, 0x38	; 56
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 2e       	mov	r0, r18
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <DIO_voidSetPinValue+0xb6>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <DIO_voidSetPinValue+0xb2>
     f7c:	84 2b       	or	r24, r20
     f7e:	8c 93       	st	X, r24
     f80:	9f c0       	rjmp	.+318    	; 0x10c0 <DIO_voidSetPinValue+0x1fe>
			case PORTC : SET_BIT(PORTC_REG,Copy_u8PIN);	break;
     f82:	a5 e3       	ldi	r26, 0x35	; 53
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e5 e3       	ldi	r30, 0x35	; 53
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <DIO_voidSetPinValue+0xde>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <DIO_voidSetPinValue+0xda>
     fa4:	84 2b       	or	r24, r20
     fa6:	8c 93       	st	X, r24
     fa8:	8b c0       	rjmp	.+278    	; 0x10c0 <DIO_voidSetPinValue+0x1fe>
			case PORTD : SET_BIT(PORTD_REG,Copy_u8PIN);	break;
     faa:	a2 e3       	ldi	r26, 0x32	; 50
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e2 e3       	ldi	r30, 0x32	; 50
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_voidSetPinValue+0x106>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_voidSetPinValue+0x102>
     fcc:	84 2b       	or	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	77 c0       	rjmp	.+238    	; 0x10c0 <DIO_voidSetPinValue+0x1fe>
			}
		}	
		else if(Copy_u8Value == LOW)
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	88 23       	and	r24, r24
     fd6:	09 f0       	breq	.+2      	; 0xfda <DIO_voidSetPinValue+0x118>
     fd8:	73 c0       	rjmp	.+230    	; 0x10c0 <DIO_voidSetPinValue+0x1fe>
		{
			switch(Copy_u8PORT)
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	3d 83       	std	Y+5, r19	; 0x05
     fe2:	2c 83       	std	Y+4, r18	; 0x04
     fe4:	8c 81       	ldd	r24, Y+4	; 0x04
     fe6:	9d 81       	ldd	r25, Y+5	; 0x05
     fe8:	81 30       	cpi	r24, 0x01	; 1
     fea:	91 05       	cpc	r25, r1
     fec:	59 f1       	breq	.+86     	; 0x1044 <DIO_voidSetPinValue+0x182>
     fee:	2c 81       	ldd	r18, Y+4	; 0x04
     ff0:	3d 81       	ldd	r19, Y+5	; 0x05
     ff2:	22 30       	cpi	r18, 0x02	; 2
     ff4:	31 05       	cpc	r19, r1
     ff6:	2c f4       	brge	.+10     	; 0x1002 <DIO_voidSetPinValue+0x140>
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	9d 81       	ldd	r25, Y+5	; 0x05
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	69 f0       	breq	.+26     	; 0x101a <DIO_voidSetPinValue+0x158>
    1000:	5f c0       	rjmp	.+190    	; 0x10c0 <DIO_voidSetPinValue+0x1fe>
    1002:	2c 81       	ldd	r18, Y+4	; 0x04
    1004:	3d 81       	ldd	r19, Y+5	; 0x05
    1006:	22 30       	cpi	r18, 0x02	; 2
    1008:	31 05       	cpc	r19, r1
    100a:	89 f1       	breq	.+98     	; 0x106e <DIO_voidSetPinValue+0x1ac>
    100c:	8c 81       	ldd	r24, Y+4	; 0x04
    100e:	9d 81       	ldd	r25, Y+5	; 0x05
    1010:	83 30       	cpi	r24, 0x03	; 3
    1012:	91 05       	cpc	r25, r1
    1014:	09 f4       	brne	.+2      	; 0x1018 <DIO_voidSetPinValue+0x156>
    1016:	40 c0       	rjmp	.+128    	; 0x1098 <DIO_voidSetPinValue+0x1d6>
    1018:	53 c0       	rjmp	.+166    	; 0x10c0 <DIO_voidSetPinValue+0x1fe>
			{
			case PORTA : CLR_BIT(PORTA_REG,Copy_u8PIN);	break;
    101a:	ab e3       	ldi	r26, 0x3B	; 59
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	eb e3       	ldi	r30, 0x3B	; 59
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 2e       	mov	r0, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_voidSetPinValue+0x176>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	0a 94       	dec	r0
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <DIO_voidSetPinValue+0x172>
    103c:	80 95       	com	r24
    103e:	84 23       	and	r24, r20
    1040:	8c 93       	st	X, r24
    1042:	3e c0       	rjmp	.+124    	; 0x10c0 <DIO_voidSetPinValue+0x1fe>
			case PORTB : CLR_BIT(PORTB_REG,Copy_u8PIN);	break;
    1044:	a8 e3       	ldi	r26, 0x38	; 56
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e8 e3       	ldi	r30, 0x38	; 56
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 2e       	mov	r0, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <DIO_voidSetPinValue+0x1a0>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	0a 94       	dec	r0
    1064:	e2 f7       	brpl	.-8      	; 0x105e <DIO_voidSetPinValue+0x19c>
    1066:	80 95       	com	r24
    1068:	84 23       	and	r24, r20
    106a:	8c 93       	st	X, r24
    106c:	29 c0       	rjmp	.+82     	; 0x10c0 <DIO_voidSetPinValue+0x1fe>
			case PORTC : CLR_BIT(PORTC_REG,Copy_u8PIN);	break;
    106e:	a5 e3       	ldi	r26, 0x35	; 53
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e5 e3       	ldi	r30, 0x35	; 53
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <DIO_voidSetPinValue+0x1ca>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <DIO_voidSetPinValue+0x1c6>
    1090:	80 95       	com	r24
    1092:	84 23       	and	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	14 c0       	rjmp	.+40     	; 0x10c0 <DIO_voidSetPinValue+0x1fe>
			case PORTD : CLR_BIT(PORTD_REG,Copy_u8PIN);	break;
    1098:	a2 e3       	ldi	r26, 0x32	; 50
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e2 e3       	ldi	r30, 0x32	; 50
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_voidSetPinValue+0x1f4>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_voidSetPinValue+0x1f0>
    10ba:	80 95       	com	r24
    10bc:	84 23       	and	r24, r20
    10be:	8c 93       	st	X, r24
		{/*	Do nothing	*/}
	}
	else
	{/*	DO nothing	*/}

}
    10c0:	27 96       	adiw	r28, 0x07	; 7
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <DIO_u8GetPinValue>:
/*					 Inputs : Copy_u8PORT , Copy_u8PIN ,		*/
/*								Copy_u8Direction	 			*/
/*					 return : void		 						*/
/****************************************************************/
u8 DIO_u8GetPinValue(u8 Copy_u8PORT , u8 Copy_u8PIN )
{
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <DIO_u8GetPinValue+0x6>
    10d8:	00 d0       	rcall	.+0      	; 0x10da <DIO_u8GetPinValue+0x8>
    10da:	0f 92       	push	r0
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	8a 83       	std	Y+2, r24	; 0x02
    10e2:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOCAL_u8ReturnValue=0;
    10e4:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PORT)
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	3d 83       	std	Y+5, r19	; 0x05
    10ee:	2c 83       	std	Y+4, r18	; 0x04
    10f0:	4c 81       	ldd	r20, Y+4	; 0x04
    10f2:	5d 81       	ldd	r21, Y+5	; 0x05
    10f4:	41 30       	cpi	r20, 0x01	; 1
    10f6:	51 05       	cpc	r21, r1
    10f8:	41 f1       	breq	.+80     	; 0x114a <DIO_u8GetPinValue+0x78>
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	9d 81       	ldd	r25, Y+5	; 0x05
    10fe:	82 30       	cpi	r24, 0x02	; 2
    1100:	91 05       	cpc	r25, r1
    1102:	34 f4       	brge	.+12     	; 0x1110 <DIO_u8GetPinValue+0x3e>
    1104:	2c 81       	ldd	r18, Y+4	; 0x04
    1106:	3d 81       	ldd	r19, Y+5	; 0x05
    1108:	21 15       	cp	r18, r1
    110a:	31 05       	cpc	r19, r1
    110c:	61 f0       	breq	.+24     	; 0x1126 <DIO_u8GetPinValue+0x54>
    110e:	52 c0       	rjmp	.+164    	; 0x11b4 <DIO_u8GetPinValue+0xe2>
    1110:	4c 81       	ldd	r20, Y+4	; 0x04
    1112:	5d 81       	ldd	r21, Y+5	; 0x05
    1114:	42 30       	cpi	r20, 0x02	; 2
    1116:	51 05       	cpc	r21, r1
    1118:	51 f1       	breq	.+84     	; 0x116e <DIO_u8GetPinValue+0x9c>
    111a:	8c 81       	ldd	r24, Y+4	; 0x04
    111c:	9d 81       	ldd	r25, Y+5	; 0x05
    111e:	83 30       	cpi	r24, 0x03	; 3
    1120:	91 05       	cpc	r25, r1
    1122:	b9 f1       	breq	.+110    	; 0x1192 <DIO_u8GetPinValue+0xc0>
    1124:	47 c0       	rjmp	.+142    	; 0x11b4 <DIO_u8GetPinValue+0xe2>
	{
	case PORTA : LOCAL_u8ReturnValue = GET_BIT(PINA_REG,Copy_u8PIN); break;
    1126:	e9 e3       	ldi	r30, 0x39	; 57
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	a9 01       	movw	r20, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_u8GetPinValue+0x6c>
    113a:	55 95       	asr	r21
    113c:	47 95       	ror	r20
    113e:	8a 95       	dec	r24
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_u8GetPinValue+0x68>
    1142:	ca 01       	movw	r24, r20
    1144:	81 70       	andi	r24, 0x01	; 1
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	35 c0       	rjmp	.+106    	; 0x11b4 <DIO_u8GetPinValue+0xe2>
	case PORTB : LOCAL_u8ReturnValue =  GET_BIT(PINB_REG,Copy_u8PIN); break;
    114a:	e6 e3       	ldi	r30, 0x36	; 54
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	88 2f       	mov	r24, r24
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	a9 01       	movw	r20, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <DIO_u8GetPinValue+0x90>
    115e:	55 95       	asr	r21
    1160:	47 95       	ror	r20
    1162:	8a 95       	dec	r24
    1164:	e2 f7       	brpl	.-8      	; 0x115e <DIO_u8GetPinValue+0x8c>
    1166:	ca 01       	movw	r24, r20
    1168:	81 70       	andi	r24, 0x01	; 1
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	23 c0       	rjmp	.+70     	; 0x11b4 <DIO_u8GetPinValue+0xe2>
	case PORTC : LOCAL_u8ReturnValue = GET_BIT(PINC_REG,Copy_u8PIN); break;
    116e:	e3 e3       	ldi	r30, 0x33	; 51
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	a9 01       	movw	r20, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <DIO_u8GetPinValue+0xb4>
    1182:	55 95       	asr	r21
    1184:	47 95       	ror	r20
    1186:	8a 95       	dec	r24
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <DIO_u8GetPinValue+0xb0>
    118a:	ca 01       	movw	r24, r20
    118c:	81 70       	andi	r24, 0x01	; 1
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	11 c0       	rjmp	.+34     	; 0x11b4 <DIO_u8GetPinValue+0xe2>
	case PORTD : LOCAL_u8ReturnValue = GET_BIT(PIND_REG,Copy_u8PIN); break;
    1192:	e0 e3       	ldi	r30, 0x30	; 48
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	88 2f       	mov	r24, r24
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	a9 01       	movw	r20, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_u8GetPinValue+0xd8>
    11a6:	55 95       	asr	r21
    11a8:	47 95       	ror	r20
    11aa:	8a 95       	dec	r24
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_u8GetPinValue+0xd4>
    11ae:	ca 01       	movw	r24, r20
    11b0:	81 70       	andi	r24, 0x01	; 1
    11b2:	89 83       	std	Y+1, r24	; 0x01
	}


	return LOCAL_u8ReturnValue;
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <DIO_voidTogglePine>:
/*					 Inputs : Copy_u8PORT , Copy_u8PIN ,		*/
/*								Copy_u8Direction	 			*/
/*					 return : void		 						*/
/****************************************************************/
void	DIO_voidTogglePine		(	u8 Copy_u8PORT , u8 Copy_u8PIN 							)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <DIO_voidTogglePine+0x6>
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <DIO_voidTogglePine+0x8>
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	6a 83       	std	Y+2, r22	; 0x02
	if( (Copy_u8PORT <4 ) && (Copy_u8PIN < 8))
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	84 30       	cpi	r24, 0x04	; 4
    11da:	08 f0       	brcs	.+2      	; 0x11de <DIO_voidTogglePine+0x18>
    11dc:	72 c0       	rjmp	.+228    	; 0x12c2 <DIO_voidTogglePine+0xfc>
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	88 30       	cpi	r24, 0x08	; 8
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <DIO_voidTogglePine+0x20>
    11e4:	6e c0       	rjmp	.+220    	; 0x12c2 <DIO_voidTogglePine+0xfc>
	{
		switch (Copy_u8PORT)
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	3c 83       	std	Y+4, r19	; 0x04
    11ee:	2b 83       	std	Y+3, r18	; 0x03
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	91 05       	cpc	r25, r1
    11f8:	49 f1       	breq	.+82     	; 0x124c <DIO_voidTogglePine+0x86>
    11fa:	2b 81       	ldd	r18, Y+3	; 0x03
    11fc:	3c 81       	ldd	r19, Y+4	; 0x04
    11fe:	22 30       	cpi	r18, 0x02	; 2
    1200:	31 05       	cpc	r19, r1
    1202:	2c f4       	brge	.+10     	; 0x120e <DIO_voidTogglePine+0x48>
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	61 f0       	breq	.+24     	; 0x1224 <DIO_voidTogglePine+0x5e>
    120c:	5a c0       	rjmp	.+180    	; 0x12c2 <DIO_voidTogglePine+0xfc>
    120e:	2b 81       	ldd	r18, Y+3	; 0x03
    1210:	3c 81       	ldd	r19, Y+4	; 0x04
    1212:	22 30       	cpi	r18, 0x02	; 2
    1214:	31 05       	cpc	r19, r1
    1216:	71 f1       	breq	.+92     	; 0x1274 <DIO_voidTogglePine+0xae>
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	83 30       	cpi	r24, 0x03	; 3
    121e:	91 05       	cpc	r25, r1
    1220:	e9 f1       	breq	.+122    	; 0x129c <DIO_voidTogglePine+0xd6>
    1222:	4f c0       	rjmp	.+158    	; 0x12c2 <DIO_voidTogglePine+0xfc>
		{
		case PORTA :  TGL_BIT(PORTA_REG,Copy_u8PIN );  break;
    1224:	ab e3       	ldi	r26, 0x3B	; 59
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	eb e3       	ldi	r30, 0x3B	; 59
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_voidTogglePine+0x7c>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <DIO_voidTogglePine+0x78>
    1246:	84 27       	eor	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	3b c0       	rjmp	.+118    	; 0x12c2 <DIO_voidTogglePine+0xfc>
		case PORTB :  TGL_BIT(PORTB_REG,Copy_u8PIN );  break;
    124c:	a8 e3       	ldi	r26, 0x38	; 56
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e8 e3       	ldi	r30, 0x38	; 56
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <DIO_voidTogglePine+0xa4>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <DIO_voidTogglePine+0xa0>
    126e:	84 27       	eor	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	27 c0       	rjmp	.+78     	; 0x12c2 <DIO_voidTogglePine+0xfc>
		case PORTC :  TGL_BIT(PORTC_REG,Copy_u8PIN );  break;
    1274:	a5 e3       	ldi	r26, 0x35	; 53
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e5 e3       	ldi	r30, 0x35	; 53
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_voidTogglePine+0xcc>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <DIO_voidTogglePine+0xc8>
    1296:	84 27       	eor	r24, r20
    1298:	8c 93       	st	X, r24
    129a:	13 c0       	rjmp	.+38     	; 0x12c2 <DIO_voidTogglePine+0xfc>
		case PORTD :  TGL_BIT(PORTD_REG,Copy_u8PIN );  break;
    129c:	a2 e3       	ldi	r26, 0x32	; 50
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e2 e3       	ldi	r30, 0x32	; 50
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_voidTogglePine+0xf4>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_voidTogglePine+0xf0>
    12be:	84 27       	eor	r24, r20
    12c0:	8c 93       	st	X, r24

		}
	}
}
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <DIO_voidSetPortDirection>:
/*					 Inputs : Copy_u8PORT , Copy_u8PIN ,		*/
/*								Copy_u8Direction	 			*/
/*					 return : void		 						*/
/****************************************************************/
void	DIO_voidSetPortDirection(	u8 Copy_u8PORT , u8 Copy_u8Direction					)
{
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <DIO_voidSetPortDirection+0x6>
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <DIO_voidSetPortDirection+0x8>
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PORT < 4)
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	84 30       	cpi	r24, 0x04	; 4
    12e4:	90 f5       	brcc	.+100    	; 0x134a <DIO_voidSetPortDirection+0x7a>
	{
		switch(Copy_u8PORT)
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	3c 83       	std	Y+4, r19	; 0x04
    12ee:	2b 83       	std	Y+3, r18	; 0x03
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	91 05       	cpc	r25, r1
    12f8:	d1 f0       	breq	.+52     	; 0x132e <DIO_voidSetPortDirection+0x5e>
    12fa:	2b 81       	ldd	r18, Y+3	; 0x03
    12fc:	3c 81       	ldd	r19, Y+4	; 0x04
    12fe:	22 30       	cpi	r18, 0x02	; 2
    1300:	31 05       	cpc	r19, r1
    1302:	2c f4       	brge	.+10     	; 0x130e <DIO_voidSetPortDirection+0x3e>
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	9c 81       	ldd	r25, Y+4	; 0x04
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	61 f0       	breq	.+24     	; 0x1324 <DIO_voidSetPortDirection+0x54>
    130c:	1e c0       	rjmp	.+60     	; 0x134a <DIO_voidSetPortDirection+0x7a>
    130e:	2b 81       	ldd	r18, Y+3	; 0x03
    1310:	3c 81       	ldd	r19, Y+4	; 0x04
    1312:	22 30       	cpi	r18, 0x02	; 2
    1314:	31 05       	cpc	r19, r1
    1316:	81 f0       	breq	.+32     	; 0x1338 <DIO_voidSetPortDirection+0x68>
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	9c 81       	ldd	r25, Y+4	; 0x04
    131c:	83 30       	cpi	r24, 0x03	; 3
    131e:	91 05       	cpc	r25, r1
    1320:	81 f0       	breq	.+32     	; 0x1342 <DIO_voidSetPortDirection+0x72>
    1322:	13 c0       	rjmp	.+38     	; 0x134a <DIO_voidSetPortDirection+0x7a>
		{
		case PORTA : DDRA_REG = Copy_u8Direction ;  break ;
    1324:	ea e3       	ldi	r30, 0x3A	; 58
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	80 83       	st	Z, r24
    132c:	0e c0       	rjmp	.+28     	; 0x134a <DIO_voidSetPortDirection+0x7a>
		case PORTB : DDRB_REG = Copy_u8Direction ;  break ;
    132e:	e7 e3       	ldi	r30, 0x37	; 55
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	80 83       	st	Z, r24
    1336:	09 c0       	rjmp	.+18     	; 0x134a <DIO_voidSetPortDirection+0x7a>
		case PORTC : DDRC_REG = Copy_u8Direction ;  break ;
    1338:	e4 e3       	ldi	r30, 0x34	; 52
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	80 83       	st	Z, r24
    1340:	04 c0       	rjmp	.+8      	; 0x134a <DIO_voidSetPortDirection+0x7a>
		case PORTD : DDRD_REG = Copy_u8Direction ;  break ;
    1342:	e1 e3       	ldi	r30, 0x31	; 49
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	80 83       	st	Z, r24
		}
	}
}
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <DIO_voidSetPortValue>:
/*								Copy_u8Direction	 			*/
/*					 return : void		 						*/
/****************************************************************/

void	DIO_voidSetPortValue	(	u8 Copy_u8PORT , u8 Copy_u8Vlaue						)
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	00 d0       	rcall	.+0      	; 0x135e <DIO_voidSetPortValue+0x6>
    135e:	00 d0       	rcall	.+0      	; 0x1360 <DIO_voidSetPortValue+0x8>
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	89 83       	std	Y+1, r24	; 0x01
    1366:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PORT <4)
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	84 30       	cpi	r24, 0x04	; 4
    136c:	90 f5       	brcc	.+100    	; 0x13d2 <DIO_voidSetPortValue+0x7a>
	{
		switch(Copy_u8PORT)
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	3c 83       	std	Y+4, r19	; 0x04
    1376:	2b 83       	std	Y+3, r18	; 0x03
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	9c 81       	ldd	r25, Y+4	; 0x04
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	91 05       	cpc	r25, r1
    1380:	d1 f0       	breq	.+52     	; 0x13b6 <DIO_voidSetPortValue+0x5e>
    1382:	2b 81       	ldd	r18, Y+3	; 0x03
    1384:	3c 81       	ldd	r19, Y+4	; 0x04
    1386:	22 30       	cpi	r18, 0x02	; 2
    1388:	31 05       	cpc	r19, r1
    138a:	2c f4       	brge	.+10     	; 0x1396 <DIO_voidSetPortValue+0x3e>
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	9c 81       	ldd	r25, Y+4	; 0x04
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	61 f0       	breq	.+24     	; 0x13ac <DIO_voidSetPortValue+0x54>
    1394:	1e c0       	rjmp	.+60     	; 0x13d2 <DIO_voidSetPortValue+0x7a>
    1396:	2b 81       	ldd	r18, Y+3	; 0x03
    1398:	3c 81       	ldd	r19, Y+4	; 0x04
    139a:	22 30       	cpi	r18, 0x02	; 2
    139c:	31 05       	cpc	r19, r1
    139e:	81 f0       	breq	.+32     	; 0x13c0 <DIO_voidSetPortValue+0x68>
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	83 30       	cpi	r24, 0x03	; 3
    13a6:	91 05       	cpc	r25, r1
    13a8:	81 f0       	breq	.+32     	; 0x13ca <DIO_voidSetPortValue+0x72>
    13aa:	13 c0       	rjmp	.+38     	; 0x13d2 <DIO_voidSetPortValue+0x7a>
		{
		case PORTA : PORTA_REG = Copy_u8Vlaue; break;
    13ac:	eb e3       	ldi	r30, 0x3B	; 59
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	80 83       	st	Z, r24
    13b4:	0e c0       	rjmp	.+28     	; 0x13d2 <DIO_voidSetPortValue+0x7a>
		case PORTB : PORTB_REG = Copy_u8Vlaue; break;
    13b6:	e8 e3       	ldi	r30, 0x38	; 56
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	80 83       	st	Z, r24
    13be:	09 c0       	rjmp	.+18     	; 0x13d2 <DIO_voidSetPortValue+0x7a>
		case PORTC : PORTC_REG = Copy_u8Vlaue; break;
    13c0:	e5 e3       	ldi	r30, 0x35	; 53
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	80 83       	st	Z, r24
    13c8:	04 c0       	rjmp	.+8      	; 0x13d2 <DIO_voidSetPortValue+0x7a>
		case PORTD : PORTD_REG = Copy_u8Vlaue; break;
    13ca:	e2 e3       	ldi	r30, 0x32	; 50
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	80 83       	st	Z, r24
		}
	}
}
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <GIE_voidInit>:




void GIE_voidInit(void)
{
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    13e8:	af e5       	ldi	r26, 0x5F	; 95
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	ef e5       	ldi	r30, 0x5F	; 95
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	80 68       	ori	r24, 0x80	; 128
    13f4:	8c 93       	st	X, r24
	
}
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <KEYPAD_u8GetPressedKey>:

u8 Column =0;
u8 Row =4;

u8    KEYPAD_u8GetPressedKey(void)
{
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	2f 97       	sbiw	r28, 0x0f	; 15
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
  u8 LOCAL_u8PressedKey = 0xff;
    1410:	8f ef       	ldi	r24, 0xFF	; 255
    1412:	8f 87       	std	Y+15, r24	; 0x0f

   for(Column=0;Column<4;Column++)
    1414:	10 92 e4 00 	sts	0x00E4, r1
    1418:	bb c0       	rjmp	.+374    	; 0x1590 <KEYPAD_u8GetPressedKey+0x194>
   {
	   DIO_voidSetPinValue(KYEPAD_PORT , Column , LOW);
    141a:	90 91 e4 00 	lds	r25, 0x00E4
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	69 2f       	mov	r22, r25
    1422:	40 e0       	ldi	r20, 0x00	; 0
    1424:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
	   for(Row=4;Row<8;Row++)
    1428:	84 e0       	ldi	r24, 0x04	; 4
    142a:	80 93 ce 00 	sts	0x00CE, r24
    142e:	9f c0       	rjmp	.+318    	; 0x156e <KEYPAD_u8GetPressedKey+0x172>
	   {
		   if(DIO_u8GetPinValue(KYEPAD_PORT,Row)==0)
    1430:	90 91 ce 00 	lds	r25, 0x00CE
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	69 2f       	mov	r22, r25
    1438:	0e 94 69 08 	call	0x10d2	; 0x10d2 <DIO_u8GetPinValue>
    143c:	88 23       	and	r24, r24
    143e:	09 f0       	breq	.+2      	; 0x1442 <KEYPAD_u8GetPressedKey+0x46>
    1440:	89 c0       	rjmp	.+274    	; 0x1554 <KEYPAD_u8GetPressedKey+0x158>
		   {
			   LOCAL_u8PressedKey = KEYPAD_u8SwitchValue [Column][Row-4];
    1442:	80 91 e4 00 	lds	r24, 0x00E4
    1446:	48 2f       	mov	r20, r24
    1448:	50 e0       	ldi	r21, 0x00	; 0
    144a:	80 91 ce 00 	lds	r24, 0x00CE
    144e:	88 2f       	mov	r24, r24
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	9c 01       	movw	r18, r24
    1454:	24 50       	subi	r18, 0x04	; 4
    1456:	30 40       	sbci	r19, 0x00	; 0
    1458:	ca 01       	movw	r24, r20
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	82 0f       	add	r24, r18
    1464:	93 1f       	adc	r25, r19
    1466:	fc 01       	movw	r30, r24
    1468:	e0 53       	subi	r30, 0x30	; 48
    146a:	ff 4f       	sbci	r31, 0xFF	; 255
    146c:	80 81       	ld	r24, Z
    146e:	8f 87       	std	Y+15, r24	; 0x0f
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	a0 e2       	ldi	r26, 0x20	; 32
    1476:	b1 e4       	ldi	r27, 0x41	; 65
    1478:	8b 87       	std	Y+11, r24	; 0x0b
    147a:	9c 87       	std	Y+12, r25	; 0x0c
    147c:	ad 87       	std	Y+13, r26	; 0x0d
    147e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1480:	6b 85       	ldd	r22, Y+11	; 0x0b
    1482:	7c 85       	ldd	r23, Y+12	; 0x0c
    1484:	8d 85       	ldd	r24, Y+13	; 0x0d
    1486:	9e 85       	ldd	r25, Y+14	; 0x0e
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	4a ef       	ldi	r20, 0xFA	; 250
    148e:	54 e4       	ldi	r21, 0x44	; 68
    1490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	8f 83       	std	Y+7, r24	; 0x07
    149a:	98 87       	std	Y+8, r25	; 0x08
    149c:	a9 87       	std	Y+9, r26	; 0x09
    149e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14a0:	6f 81       	ldd	r22, Y+7	; 0x07
    14a2:	78 85       	ldd	r23, Y+8	; 0x08
    14a4:	89 85       	ldd	r24, Y+9	; 0x09
    14a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e8       	ldi	r20, 0x80	; 128
    14ae:	5f e3       	ldi	r21, 0x3F	; 63
    14b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b4:	88 23       	and	r24, r24
    14b6:	2c f4       	brge	.+10     	; 0x14c2 <KEYPAD_u8GetPressedKey+0xc6>
		__ticks = 1;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	9e 83       	std	Y+6, r25	; 0x06
    14be:	8d 83       	std	Y+5, r24	; 0x05
    14c0:	3f c0       	rjmp	.+126    	; 0x1540 <KEYPAD_u8GetPressedKey+0x144>
	else if (__tmp > 65535)
    14c2:	6f 81       	ldd	r22, Y+7	; 0x07
    14c4:	78 85       	ldd	r23, Y+8	; 0x08
    14c6:	89 85       	ldd	r24, Y+9	; 0x09
    14c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	3f ef       	ldi	r19, 0xFF	; 255
    14ce:	4f e7       	ldi	r20, 0x7F	; 127
    14d0:	57 e4       	ldi	r21, 0x47	; 71
    14d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d6:	18 16       	cp	r1, r24
    14d8:	4c f5       	brge	.+82     	; 0x152c <KEYPAD_u8GetPressedKey+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14da:	6b 85       	ldd	r22, Y+11	; 0x0b
    14dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14de:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e2       	ldi	r20, 0x20	; 32
    14e8:	51 e4       	ldi	r21, 0x41	; 65
    14ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	bc 01       	movw	r22, r24
    14f4:	cd 01       	movw	r24, r26
    14f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	9e 83       	std	Y+6, r25	; 0x06
    1500:	8d 83       	std	Y+5, r24	; 0x05
    1502:	0f c0       	rjmp	.+30     	; 0x1522 <KEYPAD_u8GetPressedKey+0x126>
    1504:	88 ec       	ldi	r24, 0xC8	; 200
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	9c 83       	std	Y+4, r25	; 0x04
    150a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	f1 f7       	brne	.-4      	; 0x1510 <KEYPAD_u8GetPressedKey+0x114>
    1514:	9c 83       	std	Y+4, r25	; 0x04
    1516:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1518:	8d 81       	ldd	r24, Y+5	; 0x05
    151a:	9e 81       	ldd	r25, Y+6	; 0x06
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	9e 83       	std	Y+6, r25	; 0x06
    1520:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	69 f7       	brne	.-38     	; 0x1504 <KEYPAD_u8GetPressedKey+0x108>
    152a:	14 c0       	rjmp	.+40     	; 0x1554 <KEYPAD_u8GetPressedKey+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152c:	6f 81       	ldd	r22, Y+7	; 0x07
    152e:	78 85       	ldd	r23, Y+8	; 0x08
    1530:	89 85       	ldd	r24, Y+9	; 0x09
    1532:	9a 85       	ldd	r25, Y+10	; 0x0a
    1534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	9e 83       	std	Y+6, r25	; 0x06
    153e:	8d 83       	std	Y+5, r24	; 0x05
    1540:	8d 81       	ldd	r24, Y+5	; 0x05
    1542:	9e 81       	ldd	r25, Y+6	; 0x06
    1544:	9a 83       	std	Y+2, r25	; 0x02
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	f1 f7       	brne	.-4      	; 0x154c <KEYPAD_u8GetPressedKey+0x150>
    1550:	9a 83       	std	Y+2, r25	; 0x02
    1552:	89 83       	std	Y+1, r24	; 0x01
			   _delay_ms(10);  
		   }
		   while(DIO_u8GetPinValue(KYEPAD_PORT,Row)==0);
    1554:	90 91 ce 00 	lds	r25, 0x00CE
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	69 2f       	mov	r22, r25
    155c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <DIO_u8GetPinValue>
    1560:	88 23       	and	r24, r24
    1562:	c1 f3       	breq	.-16     	; 0x1554 <KEYPAD_u8GetPressedKey+0x158>
  u8 LOCAL_u8PressedKey = 0xff;

   for(Column=0;Column<4;Column++)
   {
	   DIO_voidSetPinValue(KYEPAD_PORT , Column , LOW);
	   for(Row=4;Row<8;Row++)
    1564:	80 91 ce 00 	lds	r24, 0x00CE
    1568:	8f 5f       	subi	r24, 0xFF	; 255
    156a:	80 93 ce 00 	sts	0x00CE, r24
    156e:	80 91 ce 00 	lds	r24, 0x00CE
    1572:	88 30       	cpi	r24, 0x08	; 8
    1574:	08 f4       	brcc	.+2      	; 0x1578 <KEYPAD_u8GetPressedKey+0x17c>
    1576:	5c cf       	rjmp	.-328    	; 0x1430 <KEYPAD_u8GetPressedKey+0x34>
			   _delay_ms(10);  
		   }
		   while(DIO_u8GetPinValue(KYEPAD_PORT,Row)==0);

	   }
	   DIO_voidSetPinValue(KYEPAD_PORT , Column , HIGH);
    1578:	90 91 e4 00 	lds	r25, 0x00E4
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	69 2f       	mov	r22, r25
    1580:	41 e0       	ldi	r20, 0x01	; 1
    1582:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>

u8    KEYPAD_u8GetPressedKey(void)
{
  u8 LOCAL_u8PressedKey = 0xff;

   for(Column=0;Column<4;Column++)
    1586:	80 91 e4 00 	lds	r24, 0x00E4
    158a:	8f 5f       	subi	r24, 0xFF	; 255
    158c:	80 93 e4 00 	sts	0x00E4, r24
    1590:	80 91 e4 00 	lds	r24, 0x00E4
    1594:	84 30       	cpi	r24, 0x04	; 4
    1596:	08 f4       	brcc	.+2      	; 0x159a <KEYPAD_u8GetPressedKey+0x19e>
    1598:	40 cf       	rjmp	.-384    	; 0x141a <KEYPAD_u8GetPressedKey+0x1e>
	   }
	   DIO_voidSetPinValue(KYEPAD_PORT , Column , HIGH);
   }

  
  return LOCAL_u8PressedKey;	
    159a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    159c:	2f 96       	adiw	r28, 0x0f	; 15
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <LCD_voidInit>:
/****************************************************************/
/*********************** Function Implementation  ***************/
/****************************************************************/

void	LCD_voidInit(void)
{
    15ae:	0f 93       	push	r16
    15b0:	1f 93       	push	r17
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	c4 55       	subi	r28, 0x54	; 84
    15bc:	d0 40       	sbci	r29, 0x00	; 0
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	fe 01       	movw	r30, r28
    15ca:	ef 5a       	subi	r30, 0xAF	; 175
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	ac e0       	ldi	r26, 0x0C	; 12
    15d4:	b2 e4       	ldi	r27, 0x42	; 66
    15d6:	80 83       	st	Z, r24
    15d8:	91 83       	std	Z+1, r25	; 0x01
    15da:	a2 83       	std	Z+2, r26	; 0x02
    15dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15de:	8e 01       	movw	r16, r28
    15e0:	03 5b       	subi	r16, 0xB3	; 179
    15e2:	1f 4f       	sbci	r17, 0xFF	; 255
    15e4:	fe 01       	movw	r30, r28
    15e6:	ef 5a       	subi	r30, 0xAF	; 175
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	60 81       	ld	r22, Z
    15ec:	71 81       	ldd	r23, Z+1	; 0x01
    15ee:	82 81       	ldd	r24, Z+2	; 0x02
    15f0:	93 81       	ldd	r25, Z+3	; 0x03
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	4a ef       	ldi	r20, 0xFA	; 250
    15f8:	54 e4       	ldi	r21, 0x44	; 68
    15fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	f8 01       	movw	r30, r16
    1604:	80 83       	st	Z, r24
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	a2 83       	std	Z+2, r26	; 0x02
    160a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    160c:	fe 01       	movw	r30, r28
    160e:	e3 5b       	subi	r30, 0xB3	; 179
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	60 81       	ld	r22, Z
    1614:	71 81       	ldd	r23, Z+1	; 0x01
    1616:	82 81       	ldd	r24, Z+2	; 0x02
    1618:	93 81       	ldd	r25, Z+3	; 0x03
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e8       	ldi	r20, 0x80	; 128
    1620:	5f e3       	ldi	r21, 0x3F	; 63
    1622:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1626:	88 23       	and	r24, r24
    1628:	44 f4       	brge	.+16     	; 0x163a <LCD_voidInit+0x8c>
		__ticks = 1;
    162a:	fe 01       	movw	r30, r28
    162c:	e5 5b       	subi	r30, 0xB5	; 181
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	80 83       	st	Z, r24
    1638:	64 c0       	rjmp	.+200    	; 0x1702 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    163a:	fe 01       	movw	r30, r28
    163c:	e3 5b       	subi	r30, 0xB3	; 179
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	60 81       	ld	r22, Z
    1642:	71 81       	ldd	r23, Z+1	; 0x01
    1644:	82 81       	ldd	r24, Z+2	; 0x02
    1646:	93 81       	ldd	r25, Z+3	; 0x03
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	3f ef       	ldi	r19, 0xFF	; 255
    164c:	4f e7       	ldi	r20, 0x7F	; 127
    164e:	57 e4       	ldi	r21, 0x47	; 71
    1650:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1654:	18 16       	cp	r1, r24
    1656:	0c f0       	brlt	.+2      	; 0x165a <LCD_voidInit+0xac>
    1658:	43 c0       	rjmp	.+134    	; 0x16e0 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165a:	fe 01       	movw	r30, r28
    165c:	ef 5a       	subi	r30, 0xAF	; 175
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	60 81       	ld	r22, Z
    1662:	71 81       	ldd	r23, Z+1	; 0x01
    1664:	82 81       	ldd	r24, Z+2	; 0x02
    1666:	93 81       	ldd	r25, Z+3	; 0x03
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e2       	ldi	r20, 0x20	; 32
    166e:	51 e4       	ldi	r21, 0x41	; 65
    1670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	8e 01       	movw	r16, r28
    167a:	05 5b       	subi	r16, 0xB5	; 181
    167c:	1f 4f       	sbci	r17, 0xFF	; 255
    167e:	bc 01       	movw	r22, r24
    1680:	cd 01       	movw	r24, r26
    1682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	f8 01       	movw	r30, r16
    168c:	91 83       	std	Z+1, r25	; 0x01
    168e:	80 83       	st	Z, r24
    1690:	1f c0       	rjmp	.+62     	; 0x16d0 <LCD_voidInit+0x122>
    1692:	fe 01       	movw	r30, r28
    1694:	e7 5b       	subi	r30, 0xB7	; 183
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	88 ec       	ldi	r24, 0xC8	; 200
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	91 83       	std	Z+1, r25	; 0x01
    169e:	80 83       	st	Z, r24
    16a0:	fe 01       	movw	r30, r28
    16a2:	e7 5b       	subi	r30, 0xB7	; 183
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	80 81       	ld	r24, Z
    16a8:	91 81       	ldd	r25, Z+1	; 0x01
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <LCD_voidInit+0xfc>
    16ae:	fe 01       	movw	r30, r28
    16b0:	e7 5b       	subi	r30, 0xB7	; 183
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	91 83       	std	Z+1, r25	; 0x01
    16b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b8:	de 01       	movw	r26, r28
    16ba:	a5 5b       	subi	r26, 0xB5	; 181
    16bc:	bf 4f       	sbci	r27, 0xFF	; 255
    16be:	fe 01       	movw	r30, r28
    16c0:	e5 5b       	subi	r30, 0xB5	; 181
    16c2:	ff 4f       	sbci	r31, 0xFF	; 255
    16c4:	80 81       	ld	r24, Z
    16c6:	91 81       	ldd	r25, Z+1	; 0x01
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	11 96       	adiw	r26, 0x01	; 1
    16cc:	9c 93       	st	X, r25
    16ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d0:	fe 01       	movw	r30, r28
    16d2:	e5 5b       	subi	r30, 0xB5	; 181
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	80 81       	ld	r24, Z
    16d8:	91 81       	ldd	r25, Z+1	; 0x01
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	d1 f6       	brne	.-76     	; 0x1692 <LCD_voidInit+0xe4>
    16de:	27 c0       	rjmp	.+78     	; 0x172e <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e0:	8e 01       	movw	r16, r28
    16e2:	05 5b       	subi	r16, 0xB5	; 181
    16e4:	1f 4f       	sbci	r17, 0xFF	; 255
    16e6:	fe 01       	movw	r30, r28
    16e8:	e3 5b       	subi	r30, 0xB3	; 179
    16ea:	ff 4f       	sbci	r31, 0xFF	; 255
    16ec:	60 81       	ld	r22, Z
    16ee:	71 81       	ldd	r23, Z+1	; 0x01
    16f0:	82 81       	ldd	r24, Z+2	; 0x02
    16f2:	93 81       	ldd	r25, Z+3	; 0x03
    16f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	f8 01       	movw	r30, r16
    16fe:	91 83       	std	Z+1, r25	; 0x01
    1700:	80 83       	st	Z, r24
    1702:	de 01       	movw	r26, r28
    1704:	a9 5b       	subi	r26, 0xB9	; 185
    1706:	bf 4f       	sbci	r27, 0xFF	; 255
    1708:	fe 01       	movw	r30, r28
    170a:	e5 5b       	subi	r30, 0xB5	; 181
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	80 81       	ld	r24, Z
    1710:	91 81       	ldd	r25, Z+1	; 0x01
    1712:	8d 93       	st	X+, r24
    1714:	9c 93       	st	X, r25
    1716:	fe 01       	movw	r30, r28
    1718:	e9 5b       	subi	r30, 0xB9	; 185
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	80 81       	ld	r24, Z
    171e:	91 81       	ldd	r25, Z+1	; 0x01
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <LCD_voidInit+0x172>
    1724:	fe 01       	movw	r30, r28
    1726:	e9 5b       	subi	r30, 0xB9	; 185
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	91 83       	std	Z+1, r25	; 0x01
    172c:	80 83       	st	Z, r24

			/*          EN=1                    */

			//LCD_voidSendCMD(0x02);

			DIO_voidSetPinValue(CONTROL_PORT , EN  , HIGH);
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	62 e0       	ldi	r22, 0x02	; 2
    1732:	41 e0       	ldi	r20, 0x01	; 1
    1734:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
    1738:	fe 01       	movw	r30, r28
    173a:	ed 5b       	subi	r30, 0xBD	; 189
    173c:	ff 4f       	sbci	r31, 0xFF	; 255
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	a0 e0       	ldi	r26, 0x00	; 0
    1744:	b0 e4       	ldi	r27, 0x40	; 64
    1746:	80 83       	st	Z, r24
    1748:	91 83       	std	Z+1, r25	; 0x01
    174a:	a2 83       	std	Z+2, r26	; 0x02
    174c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174e:	8e 01       	movw	r16, r28
    1750:	01 5c       	subi	r16, 0xC1	; 193
    1752:	1f 4f       	sbci	r17, 0xFF	; 255
    1754:	fe 01       	movw	r30, r28
    1756:	ed 5b       	subi	r30, 0xBD	; 189
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	60 81       	ld	r22, Z
    175c:	71 81       	ldd	r23, Z+1	; 0x01
    175e:	82 81       	ldd	r24, Z+2	; 0x02
    1760:	93 81       	ldd	r25, Z+3	; 0x03
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	4a ef       	ldi	r20, 0xFA	; 250
    1768:	54 e4       	ldi	r21, 0x44	; 68
    176a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	f8 01       	movw	r30, r16
    1774:	80 83       	st	Z, r24
    1776:	91 83       	std	Z+1, r25	; 0x01
    1778:	a2 83       	std	Z+2, r26	; 0x02
    177a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    177c:	fe 01       	movw	r30, r28
    177e:	ff 96       	adiw	r30, 0x3f	; 63
    1780:	60 81       	ld	r22, Z
    1782:	71 81       	ldd	r23, Z+1	; 0x01
    1784:	82 81       	ldd	r24, Z+2	; 0x02
    1786:	93 81       	ldd	r25, Z+3	; 0x03
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	40 e8       	ldi	r20, 0x80	; 128
    178e:	5f e3       	ldi	r21, 0x3F	; 63
    1790:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1794:	88 23       	and	r24, r24
    1796:	2c f4       	brge	.+10     	; 0x17a2 <LCD_voidInit+0x1f4>
		__ticks = 1;
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	9e af       	std	Y+62, r25	; 0x3e
    179e:	8d af       	std	Y+61, r24	; 0x3d
    17a0:	46 c0       	rjmp	.+140    	; 0x182e <LCD_voidInit+0x280>
	else if (__tmp > 65535)
    17a2:	fe 01       	movw	r30, r28
    17a4:	ff 96       	adiw	r30, 0x3f	; 63
    17a6:	60 81       	ld	r22, Z
    17a8:	71 81       	ldd	r23, Z+1	; 0x01
    17aa:	82 81       	ldd	r24, Z+2	; 0x02
    17ac:	93 81       	ldd	r25, Z+3	; 0x03
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	3f ef       	ldi	r19, 0xFF	; 255
    17b2:	4f e7       	ldi	r20, 0x7F	; 127
    17b4:	57 e4       	ldi	r21, 0x47	; 71
    17b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ba:	18 16       	cp	r1, r24
    17bc:	64 f5       	brge	.+88     	; 0x1816 <LCD_voidInit+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17be:	fe 01       	movw	r30, r28
    17c0:	ed 5b       	subi	r30, 0xBD	; 189
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	60 81       	ld	r22, Z
    17c6:	71 81       	ldd	r23, Z+1	; 0x01
    17c8:	82 81       	ldd	r24, Z+2	; 0x02
    17ca:	93 81       	ldd	r25, Z+3	; 0x03
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e2       	ldi	r20, 0x20	; 32
    17d2:	51 e4       	ldi	r21, 0x41	; 65
    17d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	bc 01       	movw	r22, r24
    17de:	cd 01       	movw	r24, r26
    17e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	9e af       	std	Y+62, r25	; 0x3e
    17ea:	8d af       	std	Y+61, r24	; 0x3d
    17ec:	0f c0       	rjmp	.+30     	; 0x180c <LCD_voidInit+0x25e>
    17ee:	88 ec       	ldi	r24, 0xC8	; 200
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	9c af       	std	Y+60, r25	; 0x3c
    17f4:	8b af       	std	Y+59, r24	; 0x3b
    17f6:	8b ad       	ldd	r24, Y+59	; 0x3b
    17f8:	9c ad       	ldd	r25, Y+60	; 0x3c
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <LCD_voidInit+0x24c>
    17fe:	9c af       	std	Y+60, r25	; 0x3c
    1800:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1802:	8d ad       	ldd	r24, Y+61	; 0x3d
    1804:	9e ad       	ldd	r25, Y+62	; 0x3e
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	9e af       	std	Y+62, r25	; 0x3e
    180a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    180c:	8d ad       	ldd	r24, Y+61	; 0x3d
    180e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1810:	00 97       	sbiw	r24, 0x00	; 0
    1812:	69 f7       	brne	.-38     	; 0x17ee <LCD_voidInit+0x240>
    1814:	16 c0       	rjmp	.+44     	; 0x1842 <LCD_voidInit+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1816:	fe 01       	movw	r30, r28
    1818:	ff 96       	adiw	r30, 0x3f	; 63
    181a:	60 81       	ld	r22, Z
    181c:	71 81       	ldd	r23, Z+1	; 0x01
    181e:	82 81       	ldd	r24, Z+2	; 0x02
    1820:	93 81       	ldd	r25, Z+3	; 0x03
    1822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	9e af       	std	Y+62, r25	; 0x3e
    182c:	8d af       	std	Y+61, r24	; 0x3d
    182e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1830:	9e ad       	ldd	r25, Y+62	; 0x3e
    1832:	9a af       	std	Y+58, r25	; 0x3a
    1834:	89 af       	std	Y+57, r24	; 0x39
    1836:	89 ad       	ldd	r24, Y+57	; 0x39
    1838:	9a ad       	ldd	r25, Y+58	; 0x3a
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	f1 f7       	brne	.-4      	; 0x183a <LCD_voidInit+0x28c>
    183e:	9a af       	std	Y+58, r25	; 0x3a
    1840:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(2);
			    /*          EN=0                    */
			DIO_voidSetPinValue(CONTROL_PORT , EN  , LOW);
    1842:	82 e0       	ldi	r24, 0x02	; 2
    1844:	62 e0       	ldi	r22, 0x02	; 2
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	a0 e0       	ldi	r26, 0x00	; 0
    1852:	b0 e4       	ldi	r27, 0x40	; 64
    1854:	8d ab       	std	Y+53, r24	; 0x35
    1856:	9e ab       	std	Y+54, r25	; 0x36
    1858:	af ab       	std	Y+55, r26	; 0x37
    185a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    185c:	6d a9       	ldd	r22, Y+53	; 0x35
    185e:	7e a9       	ldd	r23, Y+54	; 0x36
    1860:	8f a9       	ldd	r24, Y+55	; 0x37
    1862:	98 ad       	ldd	r25, Y+56	; 0x38
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	4a ef       	ldi	r20, 0xFA	; 250
    186a:	54 e4       	ldi	r21, 0x44	; 68
    186c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	89 ab       	std	Y+49, r24	; 0x31
    1876:	9a ab       	std	Y+50, r25	; 0x32
    1878:	ab ab       	std	Y+51, r26	; 0x33
    187a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    187c:	69 a9       	ldd	r22, Y+49	; 0x31
    187e:	7a a9       	ldd	r23, Y+50	; 0x32
    1880:	8b a9       	ldd	r24, Y+51	; 0x33
    1882:	9c a9       	ldd	r25, Y+52	; 0x34
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e8       	ldi	r20, 0x80	; 128
    188a:	5f e3       	ldi	r21, 0x3F	; 63
    188c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1890:	88 23       	and	r24, r24
    1892:	2c f4       	brge	.+10     	; 0x189e <LCD_voidInit+0x2f0>
		__ticks = 1;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	98 ab       	std	Y+48, r25	; 0x30
    189a:	8f a7       	std	Y+47, r24	; 0x2f
    189c:	3f c0       	rjmp	.+126    	; 0x191c <LCD_voidInit+0x36e>
	else if (__tmp > 65535)
    189e:	69 a9       	ldd	r22, Y+49	; 0x31
    18a0:	7a a9       	ldd	r23, Y+50	; 0x32
    18a2:	8b a9       	ldd	r24, Y+51	; 0x33
    18a4:	9c a9       	ldd	r25, Y+52	; 0x34
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	3f ef       	ldi	r19, 0xFF	; 255
    18aa:	4f e7       	ldi	r20, 0x7F	; 127
    18ac:	57 e4       	ldi	r21, 0x47	; 71
    18ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18b2:	18 16       	cp	r1, r24
    18b4:	4c f5       	brge	.+82     	; 0x1908 <LCD_voidInit+0x35a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b6:	6d a9       	ldd	r22, Y+53	; 0x35
    18b8:	7e a9       	ldd	r23, Y+54	; 0x36
    18ba:	8f a9       	ldd	r24, Y+55	; 0x37
    18bc:	98 ad       	ldd	r25, Y+56	; 0x38
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e2       	ldi	r20, 0x20	; 32
    18c4:	51 e4       	ldi	r21, 0x41	; 65
    18c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	bc 01       	movw	r22, r24
    18d0:	cd 01       	movw	r24, r26
    18d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	98 ab       	std	Y+48, r25	; 0x30
    18dc:	8f a7       	std	Y+47, r24	; 0x2f
    18de:	0f c0       	rjmp	.+30     	; 0x18fe <LCD_voidInit+0x350>
    18e0:	88 ec       	ldi	r24, 0xC8	; 200
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9e a7       	std	Y+46, r25	; 0x2e
    18e6:	8d a7       	std	Y+45, r24	; 0x2d
    18e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    18ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <LCD_voidInit+0x33e>
    18f0:	9e a7       	std	Y+46, r25	; 0x2e
    18f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18f6:	98 a9       	ldd	r25, Y+48	; 0x30
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	98 ab       	std	Y+48, r25	; 0x30
    18fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1900:	98 a9       	ldd	r25, Y+48	; 0x30
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	69 f7       	brne	.-38     	; 0x18e0 <LCD_voidInit+0x332>
    1906:	14 c0       	rjmp	.+40     	; 0x1930 <LCD_voidInit+0x382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1908:	69 a9       	ldd	r22, Y+49	; 0x31
    190a:	7a a9       	ldd	r23, Y+50	; 0x32
    190c:	8b a9       	ldd	r24, Y+51	; 0x33
    190e:	9c a9       	ldd	r25, Y+52	; 0x34
    1910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	98 ab       	std	Y+48, r25	; 0x30
    191a:	8f a7       	std	Y+47, r24	; 0x2f
    191c:	8f a5       	ldd	r24, Y+47	; 0x2f
    191e:	98 a9       	ldd	r25, Y+48	; 0x30
    1920:	9c a7       	std	Y+44, r25	; 0x2c
    1922:	8b a7       	std	Y+43, r24	; 0x2b
    1924:	8b a5       	ldd	r24, Y+43	; 0x2b
    1926:	9c a5       	ldd	r25, Y+44	; 0x2c
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	f1 f7       	brne	.-4      	; 0x1928 <LCD_voidInit+0x37a>
    192c:	9c a7       	std	Y+44, r25	; 0x2c
    192e:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(2);


			LCD_voidSendCMD(0x28);
    1930:	88 e2       	ldi	r24, 0x28	; 40
    1932:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_voidSendCMD>
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	a0 e8       	ldi	r26, 0x80	; 128
    193c:	bf e3       	ldi	r27, 0x3F	; 63
    193e:	8f a3       	std	Y+39, r24	; 0x27
    1940:	98 a7       	std	Y+40, r25	; 0x28
    1942:	a9 a7       	std	Y+41, r26	; 0x29
    1944:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1946:	6f a1       	ldd	r22, Y+39	; 0x27
    1948:	78 a5       	ldd	r23, Y+40	; 0x28
    194a:	89 a5       	ldd	r24, Y+41	; 0x29
    194c:	9a a5       	ldd	r25, Y+42	; 0x2a
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	4a ef       	ldi	r20, 0xFA	; 250
    1954:	54 e4       	ldi	r21, 0x44	; 68
    1956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	8b a3       	std	Y+35, r24	; 0x23
    1960:	9c a3       	std	Y+36, r25	; 0x24
    1962:	ad a3       	std	Y+37, r26	; 0x25
    1964:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1966:	6b a1       	ldd	r22, Y+35	; 0x23
    1968:	7c a1       	ldd	r23, Y+36	; 0x24
    196a:	8d a1       	ldd	r24, Y+37	; 0x25
    196c:	9e a1       	ldd	r25, Y+38	; 0x26
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e8       	ldi	r20, 0x80	; 128
    1974:	5f e3       	ldi	r21, 0x3F	; 63
    1976:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    197a:	88 23       	and	r24, r24
    197c:	2c f4       	brge	.+10     	; 0x1988 <LCD_voidInit+0x3da>
		__ticks = 1;
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	9a a3       	std	Y+34, r25	; 0x22
    1984:	89 a3       	std	Y+33, r24	; 0x21
    1986:	3f c0       	rjmp	.+126    	; 0x1a06 <LCD_voidInit+0x458>
	else if (__tmp > 65535)
    1988:	6b a1       	ldd	r22, Y+35	; 0x23
    198a:	7c a1       	ldd	r23, Y+36	; 0x24
    198c:	8d a1       	ldd	r24, Y+37	; 0x25
    198e:	9e a1       	ldd	r25, Y+38	; 0x26
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	3f ef       	ldi	r19, 0xFF	; 255
    1994:	4f e7       	ldi	r20, 0x7F	; 127
    1996:	57 e4       	ldi	r21, 0x47	; 71
    1998:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    199c:	18 16       	cp	r1, r24
    199e:	4c f5       	brge	.+82     	; 0x19f2 <LCD_voidInit+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a0:	6f a1       	ldd	r22, Y+39	; 0x27
    19a2:	78 a5       	ldd	r23, Y+40	; 0x28
    19a4:	89 a5       	ldd	r24, Y+41	; 0x29
    19a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e2       	ldi	r20, 0x20	; 32
    19ae:	51 e4       	ldi	r21, 0x41	; 65
    19b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	bc 01       	movw	r22, r24
    19ba:	cd 01       	movw	r24, r26
    19bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	9a a3       	std	Y+34, r25	; 0x22
    19c6:	89 a3       	std	Y+33, r24	; 0x21
    19c8:	0f c0       	rjmp	.+30     	; 0x19e8 <LCD_voidInit+0x43a>
    19ca:	88 ec       	ldi	r24, 0xC8	; 200
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	98 a3       	std	Y+32, r25	; 0x20
    19d0:	8f 8f       	std	Y+31, r24	; 0x1f
    19d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19d4:	98 a1       	ldd	r25, Y+32	; 0x20
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	f1 f7       	brne	.-4      	; 0x19d6 <LCD_voidInit+0x428>
    19da:	98 a3       	std	Y+32, r25	; 0x20
    19dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19de:	89 a1       	ldd	r24, Y+33	; 0x21
    19e0:	9a a1       	ldd	r25, Y+34	; 0x22
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	9a a3       	std	Y+34, r25	; 0x22
    19e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e8:	89 a1       	ldd	r24, Y+33	; 0x21
    19ea:	9a a1       	ldd	r25, Y+34	; 0x22
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	69 f7       	brne	.-38     	; 0x19ca <LCD_voidInit+0x41c>
    19f0:	14 c0       	rjmp	.+40     	; 0x1a1a <LCD_voidInit+0x46c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f2:	6b a1       	ldd	r22, Y+35	; 0x23
    19f4:	7c a1       	ldd	r23, Y+36	; 0x24
    19f6:	8d a1       	ldd	r24, Y+37	; 0x25
    19f8:	9e a1       	ldd	r25, Y+38	; 0x26
    19fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	9a a3       	std	Y+34, r25	; 0x22
    1a04:	89 a3       	std	Y+33, r24	; 0x21
    1a06:	89 a1       	ldd	r24, Y+33	; 0x21
    1a08:	9a a1       	ldd	r25, Y+34	; 0x22
    1a0a:	9e 8f       	std	Y+30, r25	; 0x1e
    1a0c:	8d 8f       	std	Y+29, r24	; 0x1d
    1a0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	f1 f7       	brne	.-4      	; 0x1a12 <LCD_voidInit+0x464>
    1a16:	9e 8f       	std	Y+30, r25	; 0x1e
    1a18:	8d 8f       	std	Y+29, r24	; 0x1d
			/*  wait until 39 Micro Sec   */
			_delay_ms(1);

			/*     Display ON/OFF Control D=1 Display on Cursor OFF*/
			LCD_voidSendCMD(0x0c);
    1a1a:	8c e0       	ldi	r24, 0x0C	; 12
    1a1c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_voidSendCMD>
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	a0 e8       	ldi	r26, 0x80	; 128
    1a26:	bf e3       	ldi	r27, 0x3F	; 63
    1a28:	89 8f       	std	Y+25, r24	; 0x19
    1a2a:	9a 8f       	std	Y+26, r25	; 0x1a
    1a2c:	ab 8f       	std	Y+27, r26	; 0x1b
    1a2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a30:	69 8d       	ldd	r22, Y+25	; 0x19
    1a32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	4a ef       	ldi	r20, 0xFA	; 250
    1a3e:	54 e4       	ldi	r21, 0x44	; 68
    1a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	8d 8b       	std	Y+21, r24	; 0x15
    1a4a:	9e 8b       	std	Y+22, r25	; 0x16
    1a4c:	af 8b       	std	Y+23, r26	; 0x17
    1a4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a50:	6d 89       	ldd	r22, Y+21	; 0x15
    1a52:	7e 89       	ldd	r23, Y+22	; 0x16
    1a54:	8f 89       	ldd	r24, Y+23	; 0x17
    1a56:	98 8d       	ldd	r25, Y+24	; 0x18
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e8       	ldi	r20, 0x80	; 128
    1a5e:	5f e3       	ldi	r21, 0x3F	; 63
    1a60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a64:	88 23       	and	r24, r24
    1a66:	2c f4       	brge	.+10     	; 0x1a72 <LCD_voidInit+0x4c4>
		__ticks = 1;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	9c 8b       	std	Y+20, r25	; 0x14
    1a6e:	8b 8b       	std	Y+19, r24	; 0x13
    1a70:	3f c0       	rjmp	.+126    	; 0x1af0 <LCD_voidInit+0x542>
	else if (__tmp > 65535)
    1a72:	6d 89       	ldd	r22, Y+21	; 0x15
    1a74:	7e 89       	ldd	r23, Y+22	; 0x16
    1a76:	8f 89       	ldd	r24, Y+23	; 0x17
    1a78:	98 8d       	ldd	r25, Y+24	; 0x18
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	3f ef       	ldi	r19, 0xFF	; 255
    1a7e:	4f e7       	ldi	r20, 0x7F	; 127
    1a80:	57 e4       	ldi	r21, 0x47	; 71
    1a82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a86:	18 16       	cp	r1, r24
    1a88:	4c f5       	brge	.+82     	; 0x1adc <LCD_voidInit+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	40 e2       	ldi	r20, 0x20	; 32
    1a98:	51 e4       	ldi	r21, 0x41	; 65
    1a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	bc 01       	movw	r22, r24
    1aa4:	cd 01       	movw	r24, r26
    1aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	9c 8b       	std	Y+20, r25	; 0x14
    1ab0:	8b 8b       	std	Y+19, r24	; 0x13
    1ab2:	0f c0       	rjmp	.+30     	; 0x1ad2 <LCD_voidInit+0x524>
    1ab4:	88 ec       	ldi	r24, 0xC8	; 200
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	9a 8b       	std	Y+18, r25	; 0x12
    1aba:	89 8b       	std	Y+17, r24	; 0x11
    1abc:	89 89       	ldd	r24, Y+17	; 0x11
    1abe:	9a 89       	ldd	r25, Y+18	; 0x12
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <LCD_voidInit+0x512>
    1ac4:	9a 8b       	std	Y+18, r25	; 0x12
    1ac6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aca:	9c 89       	ldd	r25, Y+20	; 0x14
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	9c 8b       	std	Y+20, r25	; 0x14
    1ad0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	69 f7       	brne	.-38     	; 0x1ab4 <LCD_voidInit+0x506>
    1ada:	14 c0       	rjmp	.+40     	; 0x1b04 <LCD_voidInit+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1adc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ade:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	9c 8b       	std	Y+20, r25	; 0x14
    1aee:	8b 8b       	std	Y+19, r24	; 0x13
    1af0:	8b 89       	ldd	r24, Y+19	; 0x13
    1af2:	9c 89       	ldd	r25, Y+20	; 0x14
    1af4:	98 8b       	std	Y+16, r25	; 0x10
    1af6:	8f 87       	std	Y+15, r24	; 0x0f
    1af8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1afa:	98 89       	ldd	r25, Y+16	; 0x10
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <LCD_voidInit+0x54e>
    1b00:	98 8b       	std	Y+16, r25	; 0x10
    1b02:	8f 87       	std	Y+15, r24	; 0x0f
			/*  wait until 39 Micro Sec   */
			_delay_ms(1);

			/*    Clear Display           */
			 LCD_voidSendCMD(0x01);
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_voidSendCMD>
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	a0 e0       	ldi	r26, 0x00	; 0
    1b10:	b0 e4       	ldi	r27, 0x40	; 64
    1b12:	8b 87       	std	Y+11, r24	; 0x0b
    1b14:	9c 87       	std	Y+12, r25	; 0x0c
    1b16:	ad 87       	std	Y+13, r26	; 0x0d
    1b18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	4a ef       	ldi	r20, 0xFA	; 250
    1b28:	54 e4       	ldi	r21, 0x44	; 68
    1b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	8f 83       	std	Y+7, r24	; 0x07
    1b34:	98 87       	std	Y+8, r25	; 0x08
    1b36:	a9 87       	std	Y+9, r26	; 0x09
    1b38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3c:	78 85       	ldd	r23, Y+8	; 0x08
    1b3e:	89 85       	ldd	r24, Y+9	; 0x09
    1b40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e8       	ldi	r20, 0x80	; 128
    1b48:	5f e3       	ldi	r21, 0x3F	; 63
    1b4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b4e:	88 23       	and	r24, r24
    1b50:	2c f4       	brge	.+10     	; 0x1b5c <LCD_voidInit+0x5ae>
		__ticks = 1;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	9e 83       	std	Y+6, r25	; 0x06
    1b58:	8d 83       	std	Y+5, r24	; 0x05
    1b5a:	3f c0       	rjmp	.+126    	; 0x1bda <LCD_voidInit+0x62c>
	else if (__tmp > 65535)
    1b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5e:	78 85       	ldd	r23, Y+8	; 0x08
    1b60:	89 85       	ldd	r24, Y+9	; 0x09
    1b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	3f ef       	ldi	r19, 0xFF	; 255
    1b68:	4f e7       	ldi	r20, 0x7F	; 127
    1b6a:	57 e4       	ldi	r21, 0x47	; 71
    1b6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b70:	18 16       	cp	r1, r24
    1b72:	4c f5       	brge	.+82     	; 0x1bc6 <LCD_voidInit+0x618>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e2       	ldi	r20, 0x20	; 32
    1b82:	51 e4       	ldi	r21, 0x41	; 65
    1b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	cd 01       	movw	r24, r26
    1b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	9e 83       	std	Y+6, r25	; 0x06
    1b9a:	8d 83       	std	Y+5, r24	; 0x05
    1b9c:	0f c0       	rjmp	.+30     	; 0x1bbc <LCD_voidInit+0x60e>
    1b9e:	88 ec       	ldi	r24, 0xC8	; 200
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	9c 83       	std	Y+4, r25	; 0x04
    1ba4:	8b 83       	std	Y+3, r24	; 0x03
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <LCD_voidInit+0x5fc>
    1bae:	9c 83       	std	Y+4, r25	; 0x04
    1bb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	9e 83       	std	Y+6, r25	; 0x06
    1bba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc0:	00 97       	sbiw	r24, 0x00	; 0
    1bc2:	69 f7       	brne	.-38     	; 0x1b9e <LCD_voidInit+0x5f0>
    1bc4:	14 c0       	rjmp	.+40     	; 0x1bee <LCD_voidInit+0x640>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc8:	78 85       	ldd	r23, Y+8	; 0x08
    1bca:	89 85       	ldd	r24, Y+9	; 0x09
    1bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	9e 83       	std	Y+6, r25	; 0x06
    1bd8:	8d 83       	std	Y+5, r24	; 0x05
    1bda:	8d 81       	ldd	r24, Y+5	; 0x05
    1bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bde:	9a 83       	std	Y+2, r25	; 0x02
    1be0:	89 83       	std	Y+1, r24	; 0x01
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	9a 81       	ldd	r25, Y+2	; 0x02
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	f1 f7       	brne	.-4      	; 0x1be6 <LCD_voidInit+0x638>
    1bea:	9a 83       	std	Y+2, r25	; 0x02
    1bec:	89 83       	std	Y+1, r24	; 0x01
			/*  wait until  1.53 m Sec   */
			_delay_ms(2);

			/*     Entry mode I/D=1 write from left to right  S=0 Shifting OFF */
			LCD_voidSendCMD(0x06);
    1bee:	86 e0       	ldi	r24, 0x06	; 6
    1bf0:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_voidSendCMD>
	}
}
    1bf4:	cc 5a       	subi	r28, 0xAC	; 172
    1bf6:	df 4f       	sbci	r29, 0xFF	; 255
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	1f 91       	pop	r17
    1c08:	0f 91       	pop	r16
    1c0a:	08 95       	ret

00001c0c <LCD_voidWriteChar>:
void LCD_voidWriteChar(u8 Copy_u8Data)
{
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	0f 92       	push	r0
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	89 83       	std	Y+1, r24	; 0x01
	/*  RS=1  */
	DIO_voidSetPinValue(CONTROL_PORT , RS  , HIGH);
    1c18:	82 e0       	ldi	r24, 0x02	; 2
    1c1a:	60 e0       	ldi	r22, 0x00	; 0
    1c1c:	41 e0       	ldi	r20, 0x01	; 1
    1c1e:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
	/*  RW=0  */
	DIO_voidSetPinValue(CONTROL_PORT , RW  , LOW);
    1c22:	82 e0       	ldi	r24, 0x02	; 2
    1c24:	61 e0       	ldi	r22, 0x01	; 1
    1c26:	40 e0       	ldi	r20, 0x00	; 0
    1c28:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>

	LCD_voidLatch(Copy_u8Data);
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_voidLatch>


}
    1c32:	0f 90       	pop	r0
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <LCD_voidSendCMD>:
void LCD_voidSendCMD(u8 Copy_u8CMD)
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	0f 92       	push	r0
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	89 83       	std	Y+1, r24	; 0x01
	/*  RS=0  */
	DIO_voidSetPinValue(CONTROL_PORT , RS  , LOW);
    1c46:	82 e0       	ldi	r24, 0x02	; 2
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
	/*  RW=0  */
	DIO_voidSetPinValue(CONTROL_PORT , RW  , LOW);
    1c50:	82 e0       	ldi	r24, 0x02	; 2
    1c52:	61 e0       	ldi	r22, 0x01	; 1
    1c54:	40 e0       	ldi	r20, 0x00	; 0
    1c56:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>

	LCD_voidLatch(Copy_u8CMD);
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_voidLatch>
}
    1c60:	0f 90       	pop	r0
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <LCD_voidWriteString>:

void LCD_voidWriteString(u8 *COPY_Pu8Str)
{
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <LCD_voidWriteString+0x6>
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	9a 83       	std	Y+2, r25	; 0x02
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	0a c0       	rjmp	.+20     	; 0x1c8c <LCD_voidWriteString+0x24>
	while(*COPY_Pu8Str!='\0')
	{
		LCD_voidWriteChar(*COPY_Pu8Str);
    1c78:	e9 81       	ldd	r30, Y+1	; 0x01
    1c7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c7c:	80 81       	ld	r24, Z
    1c7e:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <LCD_voidWriteChar>
		COPY_Pu8Str++;
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	9a 81       	ldd	r25, Y+2	; 0x02
    1c86:	01 96       	adiw	r24, 0x01	; 1
    1c88:	9a 83       	std	Y+2, r25	; 0x02
    1c8a:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidLatch(Copy_u8CMD);
}

void LCD_voidWriteString(u8 *COPY_Pu8Str)
{
	while(*COPY_Pu8Str!='\0')
    1c8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c90:	80 81       	ld	r24, Z
    1c92:	88 23       	and	r24, r24
    1c94:	89 f7       	brne	.-30     	; 0x1c78 <LCD_voidWriteString+0x10>
	{
		LCD_voidWriteChar(*COPY_Pu8Str);
		COPY_Pu8Str++;
	}
}
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 COPY_u8Row  , u8 COPY_u8Column)
{
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <LCD_voidGoToXY+0x6>
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <LCD_voidGoToXY+0x8>
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	6a 83       	std	Y+2, r22	; 0x02
    if (COPY_u8Row<2 && COPY_u8Column<16)
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	82 30       	cpi	r24, 0x02	; 2
    1cb4:	d8 f4       	brcc	.+54     	; 0x1cec <LCD_voidGoToXY+0x4c>
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	80 31       	cpi	r24, 0x10	; 16
    1cba:	c0 f4       	brcc	.+48     	; 0x1cec <LCD_voidGoToXY+0x4c>
    {
    	switch (COPY_u8Row)
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	3c 83       	std	Y+4, r19	; 0x04
    1cc4:	2b 83       	std	Y+3, r18	; 0x03
    1cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	31 f0       	breq	.+12     	; 0x1cda <LCD_voidGoToXY+0x3a>
    1cce:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd2:	21 30       	cpi	r18, 0x01	; 1
    1cd4:	31 05       	cpc	r19, r1
    1cd6:	31 f0       	breq	.+12     	; 0x1ce4 <LCD_voidGoToXY+0x44>
    1cd8:	09 c0       	rjmp	.+18     	; 0x1cec <LCD_voidGoToXY+0x4c>
    	{
    	case 0: LCD_voidSendCMD(0x80+COPY_u8Column); break;
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	80 58       	subi	r24, 0x80	; 128
    1cde:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_voidSendCMD>
    1ce2:	04 c0       	rjmp	.+8      	; 0x1cec <LCD_voidGoToXY+0x4c>
    	case 1: LCD_voidSendCMD(0xc0+COPY_u8Column); break;
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	80 54       	subi	r24, 0x40	; 64
    1ce8:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_voidSendCMD>
    	}
    }

}
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <LCD_voidWriteInt>:


void LCD_voidWriteInt(u32 COPY_u8Int)
{
    1cfa:	ef 92       	push	r14
    1cfc:	ff 92       	push	r15
    1cfe:	0f 93       	push	r16
    1d00:	1f 93       	push	r17
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	2c 97       	sbiw	r28, 0x0c	; 12
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	6d 83       	std	Y+5, r22	; 0x05
    1d18:	7e 83       	std	Y+6, r23	; 0x06
    1d1a:	8f 83       	std	Y+7, r24	; 0x07
    1d1c:	98 87       	std	Y+8, r25	; 0x08
	u32  num=0;
    1d1e:	19 82       	std	Y+1, r1	; 0x01
    1d20:	1a 82       	std	Y+2, r1	; 0x02
    1d22:	1b 82       	std	Y+3, r1	; 0x03
    1d24:	1c 82       	std	Y+4, r1	; 0x04
    1d26:	36 c0       	rjmp	.+108    	; 0x1d94 <LCD_voidWriteInt+0x9a>

	while(COPY_u8Int!=0)
		{
			num=(num*10)+(COPY_u8Int%10);
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2c:	ab 81       	ldd	r26, Y+3	; 0x03
    1d2e:	bc 81       	ldd	r27, Y+4	; 0x04
    1d30:	2a e0       	ldi	r18, 0x0A	; 10
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e0       	ldi	r20, 0x00	; 0
    1d36:	50 e0       	ldi	r21, 0x00	; 0
    1d38:	bc 01       	movw	r22, r24
    1d3a:	cd 01       	movw	r24, r26
    1d3c:	0e 94 aa 18 	call	0x3154	; 0x3154 <__mulsi3>
    1d40:	7b 01       	movw	r14, r22
    1d42:	8c 01       	movw	r16, r24
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	af 81       	ldd	r26, Y+7	; 0x07
    1d4a:	b8 85       	ldd	r27, Y+8	; 0x08
    1d4c:	2a e0       	ldi	r18, 0x0A	; 10
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e0       	ldi	r20, 0x00	; 0
    1d52:	50 e0       	ldi	r21, 0x00	; 0
    1d54:	bc 01       	movw	r22, r24
    1d56:	cd 01       	movw	r24, r26
    1d58:	0e 94 dd 18 	call	0x31ba	; 0x31ba <__udivmodsi4>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	8e 0d       	add	r24, r14
    1d62:	9f 1d       	adc	r25, r15
    1d64:	a0 1f       	adc	r26, r16
    1d66:	b1 1f       	adc	r27, r17
    1d68:	89 83       	std	Y+1, r24	; 0x01
    1d6a:	9a 83       	std	Y+2, r25	; 0x02
    1d6c:	ab 83       	std	Y+3, r26	; 0x03
    1d6e:	bc 83       	std	Y+4, r27	; 0x04
			COPY_u8Int/=10;
    1d70:	8d 81       	ldd	r24, Y+5	; 0x05
    1d72:	9e 81       	ldd	r25, Y+6	; 0x06
    1d74:	af 81       	ldd	r26, Y+7	; 0x07
    1d76:	b8 85       	ldd	r27, Y+8	; 0x08
    1d78:	2a e0       	ldi	r18, 0x0A	; 10
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e0       	ldi	r20, 0x00	; 0
    1d7e:	50 e0       	ldi	r21, 0x00	; 0
    1d80:	bc 01       	movw	r22, r24
    1d82:	cd 01       	movw	r24, r26
    1d84:	0e 94 dd 18 	call	0x31ba	; 0x31ba <__udivmodsi4>
    1d88:	da 01       	movw	r26, r20
    1d8a:	c9 01       	movw	r24, r18
    1d8c:	8d 83       	std	Y+5, r24	; 0x05
    1d8e:	9e 83       	std	Y+6, r25	; 0x06
    1d90:	af 83       	std	Y+7, r26	; 0x07
    1d92:	b8 87       	std	Y+8, r27	; 0x08

void LCD_voidWriteInt(u32 COPY_u8Int)
{
	u32  num=0;

	while(COPY_u8Int!=0)
    1d94:	8d 81       	ldd	r24, Y+5	; 0x05
    1d96:	9e 81       	ldd	r25, Y+6	; 0x06
    1d98:	af 81       	ldd	r26, Y+7	; 0x07
    1d9a:	b8 85       	ldd	r27, Y+8	; 0x08
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	a1 05       	cpc	r26, r1
    1da0:	b1 05       	cpc	r27, r1
    1da2:	11 f6       	brne	.-124    	; 0x1d28 <LCD_voidWriteInt+0x2e>
    1da4:	c0 c0       	rjmp	.+384    	; 0x1f26 <LCD_voidWriteInt+0x22c>
		}

	while (num!=0)
	{
       // num=COPY_u8Int %10;
	     switch(num%10)
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	9a 81       	ldd	r25, Y+2	; 0x02
    1daa:	ab 81       	ldd	r26, Y+3	; 0x03
    1dac:	bc 81       	ldd	r27, Y+4	; 0x04
    1dae:	2a e0       	ldi	r18, 0x0A	; 10
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	50 e0       	ldi	r21, 0x00	; 0
    1db6:	bc 01       	movw	r22, r24
    1db8:	cd 01       	movw	r24, r26
    1dba:	0e 94 dd 18 	call	0x31ba	; 0x31ba <__udivmodsi4>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	89 87       	std	Y+9, r24	; 0x09
    1dc4:	9a 87       	std	Y+10, r25	; 0x0a
    1dc6:	ab 87       	std	Y+11, r26	; 0x0b
    1dc8:	bc 87       	std	Y+12, r27	; 0x0c
    1dca:	89 85       	ldd	r24, Y+9	; 0x09
    1dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dce:	ab 85       	ldd	r26, Y+11	; 0x0b
    1dd0:	bc 85       	ldd	r27, Y+12	; 0x0c
    1dd2:	84 30       	cpi	r24, 0x04	; 4
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	a1 05       	cpc	r26, r1
    1dd8:	b1 05       	cpc	r27, r1
    1dda:	09 f4       	brne	.+2      	; 0x1dde <LCD_voidWriteInt+0xe4>
    1ddc:	7b c0       	rjmp	.+246    	; 0x1ed4 <LCD_voidWriteInt+0x1da>
    1dde:	89 85       	ldd	r24, Y+9	; 0x09
    1de0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de2:	ab 85       	ldd	r26, Y+11	; 0x0b
    1de4:	bc 85       	ldd	r27, Y+12	; 0x0c
    1de6:	85 30       	cpi	r24, 0x05	; 5
    1de8:	91 05       	cpc	r25, r1
    1dea:	a1 05       	cpc	r26, r1
    1dec:	b1 05       	cpc	r27, r1
    1dee:	48 f5       	brcc	.+82     	; 0x1e42 <LCD_voidWriteInt+0x148>
    1df0:	89 85       	ldd	r24, Y+9	; 0x09
    1df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df4:	ab 85       	ldd	r26, Y+11	; 0x0b
    1df6:	bc 85       	ldd	r27, Y+12	; 0x0c
    1df8:	81 30       	cpi	r24, 0x01	; 1
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	a1 05       	cpc	r26, r1
    1dfe:	b1 05       	cpc	r27, r1
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <LCD_voidWriteInt+0x10a>
    1e02:	5c c0       	rjmp	.+184    	; 0x1ebc <LCD_voidWriteInt+0x1c2>
    1e04:	89 85       	ldd	r24, Y+9	; 0x09
    1e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e08:	ab 85       	ldd	r26, Y+11	; 0x0b
    1e0a:	bc 85       	ldd	r27, Y+12	; 0x0c
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	91 05       	cpc	r25, r1
    1e10:	a1 05       	cpc	r26, r1
    1e12:	b1 05       	cpc	r27, r1
    1e14:	08 f4       	brcc	.+2      	; 0x1e18 <LCD_voidWriteInt+0x11e>
    1e16:	4e c0       	rjmp	.+156    	; 0x1eb4 <LCD_voidWriteInt+0x1ba>
    1e18:	89 85       	ldd	r24, Y+9	; 0x09
    1e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1c:	ab 85       	ldd	r26, Y+11	; 0x0b
    1e1e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1e20:	82 30       	cpi	r24, 0x02	; 2
    1e22:	91 05       	cpc	r25, r1
    1e24:	a1 05       	cpc	r26, r1
    1e26:	b1 05       	cpc	r27, r1
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <LCD_voidWriteInt+0x132>
    1e2a:	4c c0       	rjmp	.+152    	; 0x1ec4 <LCD_voidWriteInt+0x1ca>
    1e2c:	89 85       	ldd	r24, Y+9	; 0x09
    1e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e30:	ab 85       	ldd	r26, Y+11	; 0x0b
    1e32:	bc 85       	ldd	r27, Y+12	; 0x0c
    1e34:	83 30       	cpi	r24, 0x03	; 3
    1e36:	91 05       	cpc	r25, r1
    1e38:	a1 05       	cpc	r26, r1
    1e3a:	b1 05       	cpc	r27, r1
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <LCD_voidWriteInt+0x146>
    1e3e:	46 c0       	rjmp	.+140    	; 0x1ecc <LCD_voidWriteInt+0x1d2>
    1e40:	60 c0       	rjmp	.+192    	; 0x1f02 <LCD_voidWriteInt+0x208>
    1e42:	89 85       	ldd	r24, Y+9	; 0x09
    1e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e46:	ab 85       	ldd	r26, Y+11	; 0x0b
    1e48:	bc 85       	ldd	r27, Y+12	; 0x0c
    1e4a:	87 30       	cpi	r24, 0x07	; 7
    1e4c:	91 05       	cpc	r25, r1
    1e4e:	a1 05       	cpc	r26, r1
    1e50:	b1 05       	cpc	r27, r1
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <LCD_voidWriteInt+0x15c>
    1e54:	4b c0       	rjmp	.+150    	; 0x1eec <LCD_voidWriteInt+0x1f2>
    1e56:	89 85       	ldd	r24, Y+9	; 0x09
    1e58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5a:	ab 85       	ldd	r26, Y+11	; 0x0b
    1e5c:	bc 85       	ldd	r27, Y+12	; 0x0c
    1e5e:	88 30       	cpi	r24, 0x08	; 8
    1e60:	91 05       	cpc	r25, r1
    1e62:	a1 05       	cpc	r26, r1
    1e64:	b1 05       	cpc	r27, r1
    1e66:	98 f4       	brcc	.+38     	; 0x1e8e <LCD_voidWriteInt+0x194>
    1e68:	89 85       	ldd	r24, Y+9	; 0x09
    1e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6c:	ab 85       	ldd	r26, Y+11	; 0x0b
    1e6e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1e70:	85 30       	cpi	r24, 0x05	; 5
    1e72:	91 05       	cpc	r25, r1
    1e74:	a1 05       	cpc	r26, r1
    1e76:	b1 05       	cpc	r27, r1
    1e78:	89 f1       	breq	.+98     	; 0x1edc <LCD_voidWriteInt+0x1e2>
    1e7a:	89 85       	ldd	r24, Y+9	; 0x09
    1e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1e80:	bc 85       	ldd	r27, Y+12	; 0x0c
    1e82:	86 30       	cpi	r24, 0x06	; 6
    1e84:	91 05       	cpc	r25, r1
    1e86:	a1 05       	cpc	r26, r1
    1e88:	b1 05       	cpc	r27, r1
    1e8a:	61 f1       	breq	.+88     	; 0x1ee4 <LCD_voidWriteInt+0x1ea>
    1e8c:	3a c0       	rjmp	.+116    	; 0x1f02 <LCD_voidWriteInt+0x208>
    1e8e:	89 85       	ldd	r24, Y+9	; 0x09
    1e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e92:	ab 85       	ldd	r26, Y+11	; 0x0b
    1e94:	bc 85       	ldd	r27, Y+12	; 0x0c
    1e96:	88 30       	cpi	r24, 0x08	; 8
    1e98:	91 05       	cpc	r25, r1
    1e9a:	a1 05       	cpc	r26, r1
    1e9c:	b1 05       	cpc	r27, r1
    1e9e:	51 f1       	breq	.+84     	; 0x1ef4 <LCD_voidWriteInt+0x1fa>
    1ea0:	89 85       	ldd	r24, Y+9	; 0x09
    1ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea4:	ab 85       	ldd	r26, Y+11	; 0x0b
    1ea6:	bc 85       	ldd	r27, Y+12	; 0x0c
    1ea8:	89 30       	cpi	r24, 0x09	; 9
    1eaa:	91 05       	cpc	r25, r1
    1eac:	a1 05       	cpc	r26, r1
    1eae:	b1 05       	cpc	r27, r1
    1eb0:	29 f1       	breq	.+74     	; 0x1efc <LCD_voidWriteInt+0x202>
    1eb2:	27 c0       	rjmp	.+78     	; 0x1f02 <LCD_voidWriteInt+0x208>
	        {
	           case 0 : LCD_voidWriteChar(48); break;
    1eb4:	80 e3       	ldi	r24, 0x30	; 48
    1eb6:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <LCD_voidWriteChar>
    1eba:	23 c0       	rjmp	.+70     	; 0x1f02 <LCD_voidWriteInt+0x208>
	           case 1 : LCD_voidWriteChar(49); break;
    1ebc:	81 e3       	ldi	r24, 0x31	; 49
    1ebe:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <LCD_voidWriteChar>
    1ec2:	1f c0       	rjmp	.+62     	; 0x1f02 <LCD_voidWriteInt+0x208>
	           case 2 : LCD_voidWriteChar(50); break;
    1ec4:	82 e3       	ldi	r24, 0x32	; 50
    1ec6:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <LCD_voidWriteChar>
    1eca:	1b c0       	rjmp	.+54     	; 0x1f02 <LCD_voidWriteInt+0x208>
	           case 3 : LCD_voidWriteChar(51); break;
    1ecc:	83 e3       	ldi	r24, 0x33	; 51
    1ece:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <LCD_voidWriteChar>
    1ed2:	17 c0       	rjmp	.+46     	; 0x1f02 <LCD_voidWriteInt+0x208>
	           case 4 : LCD_voidWriteChar(52); break;
    1ed4:	84 e3       	ldi	r24, 0x34	; 52
    1ed6:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <LCD_voidWriteChar>
    1eda:	13 c0       	rjmp	.+38     	; 0x1f02 <LCD_voidWriteInt+0x208>
	           case 5 : LCD_voidWriteChar(53); break;
    1edc:	85 e3       	ldi	r24, 0x35	; 53
    1ede:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <LCD_voidWriteChar>
    1ee2:	0f c0       	rjmp	.+30     	; 0x1f02 <LCD_voidWriteInt+0x208>
	           case 6 : LCD_voidWriteChar(54); break;
    1ee4:	86 e3       	ldi	r24, 0x36	; 54
    1ee6:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <LCD_voidWriteChar>
    1eea:	0b c0       	rjmp	.+22     	; 0x1f02 <LCD_voidWriteInt+0x208>
	           case 7 : LCD_voidWriteChar(55); break;
    1eec:	87 e3       	ldi	r24, 0x37	; 55
    1eee:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <LCD_voidWriteChar>
    1ef2:	07 c0       	rjmp	.+14     	; 0x1f02 <LCD_voidWriteInt+0x208>
	           case 8 : LCD_voidWriteChar(56); break;
    1ef4:	88 e3       	ldi	r24, 0x38	; 56
    1ef6:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <LCD_voidWriteChar>
    1efa:	03 c0       	rjmp	.+6      	; 0x1f02 <LCD_voidWriteInt+0x208>
	           case 9 : LCD_voidWriteChar(57); break;
    1efc:	89 e3       	ldi	r24, 0x39	; 57
    1efe:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <LCD_voidWriteChar>
	          }
	     num/=10;
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	9a 81       	ldd	r25, Y+2	; 0x02
    1f06:	ab 81       	ldd	r26, Y+3	; 0x03
    1f08:	bc 81       	ldd	r27, Y+4	; 0x04
    1f0a:	2a e0       	ldi	r18, 0x0A	; 10
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e0       	ldi	r20, 0x00	; 0
    1f10:	50 e0       	ldi	r21, 0x00	; 0
    1f12:	bc 01       	movw	r22, r24
    1f14:	cd 01       	movw	r24, r26
    1f16:	0e 94 dd 18 	call	0x31ba	; 0x31ba <__udivmodsi4>
    1f1a:	da 01       	movw	r26, r20
    1f1c:	c9 01       	movw	r24, r18
    1f1e:	89 83       	std	Y+1, r24	; 0x01
    1f20:	9a 83       	std	Y+2, r25	; 0x02
    1f22:	ab 83       	std	Y+3, r26	; 0x03
    1f24:	bc 83       	std	Y+4, r27	; 0x04
		{
			num=(num*10)+(COPY_u8Int%10);
			COPY_u8Int/=10;
		}

	while (num!=0)
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2a:	ab 81       	ldd	r26, Y+3	; 0x03
    1f2c:	bc 81       	ldd	r27, Y+4	; 0x04
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	a1 05       	cpc	r26, r1
    1f32:	b1 05       	cpc	r27, r1
    1f34:	09 f0       	breq	.+2      	; 0x1f38 <LCD_voidWriteInt+0x23e>
    1f36:	37 cf       	rjmp	.-402    	; 0x1da6 <LCD_voidWriteInt+0xac>
	           case 8 : LCD_voidWriteChar(56); break;
	           case 9 : LCD_voidWriteChar(57); break;
	          }
	     num/=10;
     }
}
    1f38:	2c 96       	adiw	r28, 0x0c	; 12
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	de bf       	out	0x3e, r29	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	cd bf       	out	0x3d, r28	; 61
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	1f 91       	pop	r17
    1f4a:	0f 91       	pop	r16
    1f4c:	ff 90       	pop	r15
    1f4e:	ef 90       	pop	r14
    1f50:	08 95       	ret

00001f52 <LCD_voidLatch>:


void LCD_voidLatch(u8 COPY_u8Data)
{
    1f52:	0f 93       	push	r16
    1f54:	1f 93       	push	r17
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    1f5e:	c5 55       	subi	r28, 0x55	; 85
    1f60:	d0 40       	sbci	r29, 0x00	; 0
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	cd bf       	out	0x3d, r28	; 61
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	eb 5a       	subi	r30, 0xAB	; 171
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	80 83       	st	Z, r24
	if (COPY_u8Data == 0x28)
    1f74:	fe 01       	movw	r30, r28
    1f76:	eb 5a       	subi	r30, 0xAB	; 171
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	80 81       	ld	r24, Z
    1f7c:	88 32       	cpi	r24, 0x28	; 40
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <LCD_voidLatch+0x30>
    1f80:	79 c1       	rjmp	.+754    	; 0x2274 <LCD_voidLatch+0x322>
	{
		DIO_voidSetPinValue( DATA_PORT , PIN7 ,GET_BIT(COPY_u8Data ,PIN7));
    1f82:	fe 01       	movw	r30, r28
    1f84:	eb 5a       	subi	r30, 0xAB	; 171
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	80 81       	ld	r24, Z
    1f8a:	98 2f       	mov	r25, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	99 27       	eor	r25, r25
    1f90:	99 1f       	adc	r25, r25
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	67 e0       	ldi	r22, 0x07	; 7
    1f96:	49 2f       	mov	r20, r25
    1f98:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue( DATA_PORT , PIN6 , (COPY_u8Data >> 6) & 1);
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	eb 5a       	subi	r30, 0xAB	; 171
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	80 81       	ld	r24, Z
    1fa4:	82 95       	swap	r24
    1fa6:	86 95       	lsr	r24
    1fa8:	86 95       	lsr	r24
    1faa:	83 70       	andi	r24, 0x03	; 3
    1fac:	98 2f       	mov	r25, r24
    1fae:	91 70       	andi	r25, 0x01	; 1
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	66 e0       	ldi	r22, 0x06	; 6
    1fb4:	49 2f       	mov	r20, r25
    1fb6:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue( DATA_PORT , PIN5 , (COPY_u8Data >> 5) & 1);
    1fba:	fe 01       	movw	r30, r28
    1fbc:	eb 5a       	subi	r30, 0xAB	; 171
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	80 81       	ld	r24, Z
    1fc2:	82 95       	swap	r24
    1fc4:	86 95       	lsr	r24
    1fc6:	87 70       	andi	r24, 0x07	; 7
    1fc8:	98 2f       	mov	r25, r24
    1fca:	91 70       	andi	r25, 0x01	; 1
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	65 e0       	ldi	r22, 0x05	; 5
    1fd0:	49 2f       	mov	r20, r25
    1fd2:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue( DATA_PORT , PIN4 , (COPY_u8Data >> 4) & 1);
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	eb 5a       	subi	r30, 0xAB	; 171
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	80 81       	ld	r24, Z
    1fde:	82 95       	swap	r24
    1fe0:	8f 70       	andi	r24, 0x0F	; 15
    1fe2:	98 2f       	mov	r25, r24
    1fe4:	91 70       	andi	r25, 0x01	; 1
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	64 e0       	ldi	r22, 0x04	; 4
    1fea:	49 2f       	mov	r20, r25
    1fec:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
		/*          EN=1                    */
		   DIO_voidSetPinValue(CONTROL_PORT , EN  , HIGH);
    1ff0:	82 e0       	ldi	r24, 0x02	; 2
    1ff2:	62 e0       	ldi	r22, 0x02	; 2
    1ff4:	41 e0       	ldi	r20, 0x01	; 1
    1ff6:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	ef 5a       	subi	r30, 0xAF	; 175
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	a0 e0       	ldi	r26, 0x00	; 0
    2006:	b0 e4       	ldi	r27, 0x40	; 64
    2008:	80 83       	st	Z, r24
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	a2 83       	std	Z+2, r26	; 0x02
    200e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2010:	8e 01       	movw	r16, r28
    2012:	03 5b       	subi	r16, 0xB3	; 179
    2014:	1f 4f       	sbci	r17, 0xFF	; 255
    2016:	fe 01       	movw	r30, r28
    2018:	ef 5a       	subi	r30, 0xAF	; 175
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	60 81       	ld	r22, Z
    201e:	71 81       	ldd	r23, Z+1	; 0x01
    2020:	82 81       	ldd	r24, Z+2	; 0x02
    2022:	93 81       	ldd	r25, Z+3	; 0x03
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	4a ef       	ldi	r20, 0xFA	; 250
    202a:	54 e4       	ldi	r21, 0x44	; 68
    202c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	f8 01       	movw	r30, r16
    2036:	80 83       	st	Z, r24
    2038:	91 83       	std	Z+1, r25	; 0x01
    203a:	a2 83       	std	Z+2, r26	; 0x02
    203c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    203e:	fe 01       	movw	r30, r28
    2040:	e3 5b       	subi	r30, 0xB3	; 179
    2042:	ff 4f       	sbci	r31, 0xFF	; 255
    2044:	60 81       	ld	r22, Z
    2046:	71 81       	ldd	r23, Z+1	; 0x01
    2048:	82 81       	ldd	r24, Z+2	; 0x02
    204a:	93 81       	ldd	r25, Z+3	; 0x03
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e8       	ldi	r20, 0x80	; 128
    2052:	5f e3       	ldi	r21, 0x3F	; 63
    2054:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2058:	88 23       	and	r24, r24
    205a:	44 f4       	brge	.+16     	; 0x206c <LCD_voidLatch+0x11a>
		__ticks = 1;
    205c:	fe 01       	movw	r30, r28
    205e:	e5 5b       	subi	r30, 0xB5	; 181
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	91 83       	std	Z+1, r25	; 0x01
    2068:	80 83       	st	Z, r24
    206a:	64 c0       	rjmp	.+200    	; 0x2134 <LCD_voidLatch+0x1e2>
	else if (__tmp > 65535)
    206c:	fe 01       	movw	r30, r28
    206e:	e3 5b       	subi	r30, 0xB3	; 179
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	60 81       	ld	r22, Z
    2074:	71 81       	ldd	r23, Z+1	; 0x01
    2076:	82 81       	ldd	r24, Z+2	; 0x02
    2078:	93 81       	ldd	r25, Z+3	; 0x03
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	3f ef       	ldi	r19, 0xFF	; 255
    207e:	4f e7       	ldi	r20, 0x7F	; 127
    2080:	57 e4       	ldi	r21, 0x47	; 71
    2082:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2086:	18 16       	cp	r1, r24
    2088:	0c f0       	brlt	.+2      	; 0x208c <LCD_voidLatch+0x13a>
    208a:	43 c0       	rjmp	.+134    	; 0x2112 <LCD_voidLatch+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208c:	fe 01       	movw	r30, r28
    208e:	ef 5a       	subi	r30, 0xAF	; 175
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	60 81       	ld	r22, Z
    2094:	71 81       	ldd	r23, Z+1	; 0x01
    2096:	82 81       	ldd	r24, Z+2	; 0x02
    2098:	93 81       	ldd	r25, Z+3	; 0x03
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e2       	ldi	r20, 0x20	; 32
    20a0:	51 e4       	ldi	r21, 0x41	; 65
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	8e 01       	movw	r16, r28
    20ac:	05 5b       	subi	r16, 0xB5	; 181
    20ae:	1f 4f       	sbci	r17, 0xFF	; 255
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	f8 01       	movw	r30, r16
    20be:	91 83       	std	Z+1, r25	; 0x01
    20c0:	80 83       	st	Z, r24
    20c2:	1f c0       	rjmp	.+62     	; 0x2102 <LCD_voidLatch+0x1b0>
    20c4:	fe 01       	movw	r30, r28
    20c6:	e7 5b       	subi	r30, 0xB7	; 183
    20c8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ca:	88 ec       	ldi	r24, 0xC8	; 200
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	91 83       	std	Z+1, r25	; 0x01
    20d0:	80 83       	st	Z, r24
    20d2:	fe 01       	movw	r30, r28
    20d4:	e7 5b       	subi	r30, 0xB7	; 183
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	80 81       	ld	r24, Z
    20da:	91 81       	ldd	r25, Z+1	; 0x01
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	f1 f7       	brne	.-4      	; 0x20dc <LCD_voidLatch+0x18a>
    20e0:	fe 01       	movw	r30, r28
    20e2:	e7 5b       	subi	r30, 0xB7	; 183
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	91 83       	std	Z+1, r25	; 0x01
    20e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ea:	de 01       	movw	r26, r28
    20ec:	a5 5b       	subi	r26, 0xB5	; 181
    20ee:	bf 4f       	sbci	r27, 0xFF	; 255
    20f0:	fe 01       	movw	r30, r28
    20f2:	e5 5b       	subi	r30, 0xB5	; 181
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	80 81       	ld	r24, Z
    20f8:	91 81       	ldd	r25, Z+1	; 0x01
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	11 96       	adiw	r26, 0x01	; 1
    20fe:	9c 93       	st	X, r25
    2100:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2102:	fe 01       	movw	r30, r28
    2104:	e5 5b       	subi	r30, 0xB5	; 181
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	80 81       	ld	r24, Z
    210a:	91 81       	ldd	r25, Z+1	; 0x01
    210c:	00 97       	sbiw	r24, 0x00	; 0
    210e:	d1 f6       	brne	.-76     	; 0x20c4 <LCD_voidLatch+0x172>
    2110:	27 c0       	rjmp	.+78     	; 0x2160 <LCD_voidLatch+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2112:	8e 01       	movw	r16, r28
    2114:	05 5b       	subi	r16, 0xB5	; 181
    2116:	1f 4f       	sbci	r17, 0xFF	; 255
    2118:	fe 01       	movw	r30, r28
    211a:	e3 5b       	subi	r30, 0xB3	; 179
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	60 81       	ld	r22, Z
    2120:	71 81       	ldd	r23, Z+1	; 0x01
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	f8 01       	movw	r30, r16
    2130:	91 83       	std	Z+1, r25	; 0x01
    2132:	80 83       	st	Z, r24
    2134:	de 01       	movw	r26, r28
    2136:	a9 5b       	subi	r26, 0xB9	; 185
    2138:	bf 4f       	sbci	r27, 0xFF	; 255
    213a:	fe 01       	movw	r30, r28
    213c:	e5 5b       	subi	r30, 0xB5	; 181
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	80 81       	ld	r24, Z
    2142:	91 81       	ldd	r25, Z+1	; 0x01
    2144:	8d 93       	st	X+, r24
    2146:	9c 93       	st	X, r25
    2148:	fe 01       	movw	r30, r28
    214a:	e9 5b       	subi	r30, 0xB9	; 185
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	80 81       	ld	r24, Z
    2150:	91 81       	ldd	r25, Z+1	; 0x01
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	f1 f7       	brne	.-4      	; 0x2152 <LCD_voidLatch+0x200>
    2156:	fe 01       	movw	r30, r28
    2158:	e9 5b       	subi	r30, 0xB9	; 185
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	91 83       	std	Z+1, r25	; 0x01
    215e:	80 83       	st	Z, r24
			_delay_ms(2);
		   /*          EN=0                    */
		   DIO_voidSetPinValue(CONTROL_PORT , EN  , LOW);
    2160:	82 e0       	ldi	r24, 0x02	; 2
    2162:	62 e0       	ldi	r22, 0x02	; 2
    2164:	40 e0       	ldi	r20, 0x00	; 0
    2166:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
    216a:	fe 01       	movw	r30, r28
    216c:	ed 5b       	subi	r30, 0xBD	; 189
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	a0 e0       	ldi	r26, 0x00	; 0
    2176:	b0 e4       	ldi	r27, 0x40	; 64
    2178:	80 83       	st	Z, r24
    217a:	91 83       	std	Z+1, r25	; 0x01
    217c:	a2 83       	std	Z+2, r26	; 0x02
    217e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2180:	8e 01       	movw	r16, r28
    2182:	01 5c       	subi	r16, 0xC1	; 193
    2184:	1f 4f       	sbci	r17, 0xFF	; 255
    2186:	fe 01       	movw	r30, r28
    2188:	ed 5b       	subi	r30, 0xBD	; 189
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	60 81       	ld	r22, Z
    218e:	71 81       	ldd	r23, Z+1	; 0x01
    2190:	82 81       	ldd	r24, Z+2	; 0x02
    2192:	93 81       	ldd	r25, Z+3	; 0x03
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	4a ef       	ldi	r20, 0xFA	; 250
    219a:	54 e4       	ldi	r21, 0x44	; 68
    219c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	f8 01       	movw	r30, r16
    21a6:	80 83       	st	Z, r24
    21a8:	91 83       	std	Z+1, r25	; 0x01
    21aa:	a2 83       	std	Z+2, r26	; 0x02
    21ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21ae:	fe 01       	movw	r30, r28
    21b0:	ff 96       	adiw	r30, 0x3f	; 63
    21b2:	60 81       	ld	r22, Z
    21b4:	71 81       	ldd	r23, Z+1	; 0x01
    21b6:	82 81       	ldd	r24, Z+2	; 0x02
    21b8:	93 81       	ldd	r25, Z+3	; 0x03
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e8       	ldi	r20, 0x80	; 128
    21c0:	5f e3       	ldi	r21, 0x3F	; 63
    21c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c6:	88 23       	and	r24, r24
    21c8:	2c f4       	brge	.+10     	; 0x21d4 <LCD_voidLatch+0x282>
		__ticks = 1;
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	9e af       	std	Y+62, r25	; 0x3e
    21d0:	8d af       	std	Y+61, r24	; 0x3d
    21d2:	46 c0       	rjmp	.+140    	; 0x2260 <LCD_voidLatch+0x30e>
	else if (__tmp > 65535)
    21d4:	fe 01       	movw	r30, r28
    21d6:	ff 96       	adiw	r30, 0x3f	; 63
    21d8:	60 81       	ld	r22, Z
    21da:	71 81       	ldd	r23, Z+1	; 0x01
    21dc:	82 81       	ldd	r24, Z+2	; 0x02
    21de:	93 81       	ldd	r25, Z+3	; 0x03
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	3f ef       	ldi	r19, 0xFF	; 255
    21e4:	4f e7       	ldi	r20, 0x7F	; 127
    21e6:	57 e4       	ldi	r21, 0x47	; 71
    21e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ec:	18 16       	cp	r1, r24
    21ee:	64 f5       	brge	.+88     	; 0x2248 <LCD_voidLatch+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f0:	fe 01       	movw	r30, r28
    21f2:	ed 5b       	subi	r30, 0xBD	; 189
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	60 81       	ld	r22, Z
    21f8:	71 81       	ldd	r23, Z+1	; 0x01
    21fa:	82 81       	ldd	r24, Z+2	; 0x02
    21fc:	93 81       	ldd	r25, Z+3	; 0x03
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e2       	ldi	r20, 0x20	; 32
    2204:	51 e4       	ldi	r21, 0x41	; 65
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	bc 01       	movw	r22, r24
    2210:	cd 01       	movw	r24, r26
    2212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	9e af       	std	Y+62, r25	; 0x3e
    221c:	8d af       	std	Y+61, r24	; 0x3d
    221e:	0f c0       	rjmp	.+30     	; 0x223e <LCD_voidLatch+0x2ec>
    2220:	88 ec       	ldi	r24, 0xC8	; 200
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9c af       	std	Y+60, r25	; 0x3c
    2226:	8b af       	std	Y+59, r24	; 0x3b
    2228:	8b ad       	ldd	r24, Y+59	; 0x3b
    222a:	9c ad       	ldd	r25, Y+60	; 0x3c
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <LCD_voidLatch+0x2da>
    2230:	9c af       	std	Y+60, r25	; 0x3c
    2232:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2234:	8d ad       	ldd	r24, Y+61	; 0x3d
    2236:	9e ad       	ldd	r25, Y+62	; 0x3e
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	9e af       	std	Y+62, r25	; 0x3e
    223c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2240:	9e ad       	ldd	r25, Y+62	; 0x3e
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	69 f7       	brne	.-38     	; 0x2220 <LCD_voidLatch+0x2ce>
    2246:	16 c0       	rjmp	.+44     	; 0x2274 <LCD_voidLatch+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2248:	fe 01       	movw	r30, r28
    224a:	ff 96       	adiw	r30, 0x3f	; 63
    224c:	60 81       	ld	r22, Z
    224e:	71 81       	ldd	r23, Z+1	; 0x01
    2250:	82 81       	ldd	r24, Z+2	; 0x02
    2252:	93 81       	ldd	r25, Z+3	; 0x03
    2254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	9e af       	std	Y+62, r25	; 0x3e
    225e:	8d af       	std	Y+61, r24	; 0x3d
    2260:	8d ad       	ldd	r24, Y+61	; 0x3d
    2262:	9e ad       	ldd	r25, Y+62	; 0x3e
    2264:	9a af       	std	Y+58, r25	; 0x3a
    2266:	89 af       	std	Y+57, r24	; 0x39
    2268:	89 ad       	ldd	r24, Y+57	; 0x39
    226a:	9a ad       	ldd	r25, Y+58	; 0x3a
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <LCD_voidLatch+0x31a>
    2270:	9a af       	std	Y+58, r25	; 0x3a
    2272:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(2);

	}

	DIO_voidSetPinValue( DATA_PORT , PIN7 , (COPY_u8Data >> 7) & 1);
    2274:	fe 01       	movw	r30, r28
    2276:	eb 5a       	subi	r30, 0xAB	; 171
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	80 81       	ld	r24, Z
    227c:	98 2f       	mov	r25, r24
    227e:	99 1f       	adc	r25, r25
    2280:	99 27       	eor	r25, r25
    2282:	99 1f       	adc	r25, r25
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	67 e0       	ldi	r22, 0x07	; 7
    2288:	49 2f       	mov	r20, r25
    228a:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( DATA_PORT , PIN6 , (COPY_u8Data >> 6) & 1);
    228e:	fe 01       	movw	r30, r28
    2290:	eb 5a       	subi	r30, 0xAB	; 171
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	80 81       	ld	r24, Z
    2296:	82 95       	swap	r24
    2298:	86 95       	lsr	r24
    229a:	86 95       	lsr	r24
    229c:	83 70       	andi	r24, 0x03	; 3
    229e:	98 2f       	mov	r25, r24
    22a0:	91 70       	andi	r25, 0x01	; 1
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	66 e0       	ldi	r22, 0x06	; 6
    22a6:	49 2f       	mov	r20, r25
    22a8:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( DATA_PORT , PIN5 , (COPY_u8Data >> 5) & 1);
    22ac:	fe 01       	movw	r30, r28
    22ae:	eb 5a       	subi	r30, 0xAB	; 171
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	80 81       	ld	r24, Z
    22b4:	82 95       	swap	r24
    22b6:	86 95       	lsr	r24
    22b8:	87 70       	andi	r24, 0x07	; 7
    22ba:	98 2f       	mov	r25, r24
    22bc:	91 70       	andi	r25, 0x01	; 1
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	65 e0       	ldi	r22, 0x05	; 5
    22c2:	49 2f       	mov	r20, r25
    22c4:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( DATA_PORT , PIN4 , (COPY_u8Data >> 4) & 1);
    22c8:	fe 01       	movw	r30, r28
    22ca:	eb 5a       	subi	r30, 0xAB	; 171
    22cc:	ff 4f       	sbci	r31, 0xFF	; 255
    22ce:	80 81       	ld	r24, Z
    22d0:	82 95       	swap	r24
    22d2:	8f 70       	andi	r24, 0x0F	; 15
    22d4:	98 2f       	mov	r25, r24
    22d6:	91 70       	andi	r25, 0x01	; 1
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	64 e0       	ldi	r22, 0x04	; 4
    22dc:	49 2f       	mov	r20, r25
    22de:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
	}
	if ( LCD_MODE == FOUR_BIT)
		{

		/*          EN=1                    */
			   DIO_voidSetPinValue(CONTROL_PORT , EN  , HIGH);
    22e2:	82 e0       	ldi	r24, 0x02	; 2
    22e4:	62 e0       	ldi	r22, 0x02	; 2
    22e6:	41 e0       	ldi	r20, 0x01	; 1
    22e8:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	a0 e0       	ldi	r26, 0x00	; 0
    22f2:	b0 e4       	ldi	r27, 0x40	; 64
    22f4:	8d ab       	std	Y+53, r24	; 0x35
    22f6:	9e ab       	std	Y+54, r25	; 0x36
    22f8:	af ab       	std	Y+55, r26	; 0x37
    22fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fc:	6d a9       	ldd	r22, Y+53	; 0x35
    22fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2300:	8f a9       	ldd	r24, Y+55	; 0x37
    2302:	98 ad       	ldd	r25, Y+56	; 0x38
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	4a ef       	ldi	r20, 0xFA	; 250
    230a:	54 e4       	ldi	r21, 0x44	; 68
    230c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	89 ab       	std	Y+49, r24	; 0x31
    2316:	9a ab       	std	Y+50, r25	; 0x32
    2318:	ab ab       	std	Y+51, r26	; 0x33
    231a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    231c:	69 a9       	ldd	r22, Y+49	; 0x31
    231e:	7a a9       	ldd	r23, Y+50	; 0x32
    2320:	8b a9       	ldd	r24, Y+51	; 0x33
    2322:	9c a9       	ldd	r25, Y+52	; 0x34
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e8       	ldi	r20, 0x80	; 128
    232a:	5f e3       	ldi	r21, 0x3F	; 63
    232c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2330:	88 23       	and	r24, r24
    2332:	2c f4       	brge	.+10     	; 0x233e <LCD_voidLatch+0x3ec>
		__ticks = 1;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	98 ab       	std	Y+48, r25	; 0x30
    233a:	8f a7       	std	Y+47, r24	; 0x2f
    233c:	3f c0       	rjmp	.+126    	; 0x23bc <LCD_voidLatch+0x46a>
	else if (__tmp > 65535)
    233e:	69 a9       	ldd	r22, Y+49	; 0x31
    2340:	7a a9       	ldd	r23, Y+50	; 0x32
    2342:	8b a9       	ldd	r24, Y+51	; 0x33
    2344:	9c a9       	ldd	r25, Y+52	; 0x34
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	3f ef       	ldi	r19, 0xFF	; 255
    234a:	4f e7       	ldi	r20, 0x7F	; 127
    234c:	57 e4       	ldi	r21, 0x47	; 71
    234e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2352:	18 16       	cp	r1, r24
    2354:	4c f5       	brge	.+82     	; 0x23a8 <LCD_voidLatch+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2356:	6d a9       	ldd	r22, Y+53	; 0x35
    2358:	7e a9       	ldd	r23, Y+54	; 0x36
    235a:	8f a9       	ldd	r24, Y+55	; 0x37
    235c:	98 ad       	ldd	r25, Y+56	; 0x38
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	40 e2       	ldi	r20, 0x20	; 32
    2364:	51 e4       	ldi	r21, 0x41	; 65
    2366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	bc 01       	movw	r22, r24
    2370:	cd 01       	movw	r24, r26
    2372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	98 ab       	std	Y+48, r25	; 0x30
    237c:	8f a7       	std	Y+47, r24	; 0x2f
    237e:	0f c0       	rjmp	.+30     	; 0x239e <LCD_voidLatch+0x44c>
    2380:	88 ec       	ldi	r24, 0xC8	; 200
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9e a7       	std	Y+46, r25	; 0x2e
    2386:	8d a7       	std	Y+45, r24	; 0x2d
    2388:	8d a5       	ldd	r24, Y+45	; 0x2d
    238a:	9e a5       	ldd	r25, Y+46	; 0x2e
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <LCD_voidLatch+0x43a>
    2390:	9e a7       	std	Y+46, r25	; 0x2e
    2392:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2394:	8f a5       	ldd	r24, Y+47	; 0x2f
    2396:	98 a9       	ldd	r25, Y+48	; 0x30
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	98 ab       	std	Y+48, r25	; 0x30
    239c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239e:	8f a5       	ldd	r24, Y+47	; 0x2f
    23a0:	98 a9       	ldd	r25, Y+48	; 0x30
    23a2:	00 97       	sbiw	r24, 0x00	; 0
    23a4:	69 f7       	brne	.-38     	; 0x2380 <LCD_voidLatch+0x42e>
    23a6:	14 c0       	rjmp	.+40     	; 0x23d0 <LCD_voidLatch+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a8:	69 a9       	ldd	r22, Y+49	; 0x31
    23aa:	7a a9       	ldd	r23, Y+50	; 0x32
    23ac:	8b a9       	ldd	r24, Y+51	; 0x33
    23ae:	9c a9       	ldd	r25, Y+52	; 0x34
    23b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	98 ab       	std	Y+48, r25	; 0x30
    23ba:	8f a7       	std	Y+47, r24	; 0x2f
    23bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    23be:	98 a9       	ldd	r25, Y+48	; 0x30
    23c0:	9c a7       	std	Y+44, r25	; 0x2c
    23c2:	8b a7       	std	Y+43, r24	; 0x2b
    23c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    23c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <LCD_voidLatch+0x476>
    23cc:	9c a7       	std	Y+44, r25	; 0x2c
    23ce:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(2);
			   /*          EN=0                    */
			   DIO_voidSetPinValue(CONTROL_PORT , EN  , LOW);
    23d0:	82 e0       	ldi	r24, 0x02	; 2
    23d2:	62 e0       	ldi	r22, 0x02	; 2
    23d4:	40 e0       	ldi	r20, 0x00	; 0
    23d6:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	a0 e0       	ldi	r26, 0x00	; 0
    23e0:	b0 e4       	ldi	r27, 0x40	; 64
    23e2:	8f a3       	std	Y+39, r24	; 0x27
    23e4:	98 a7       	std	Y+40, r25	; 0x28
    23e6:	a9 a7       	std	Y+41, r26	; 0x29
    23e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ea:	6f a1       	ldd	r22, Y+39	; 0x27
    23ec:	78 a5       	ldd	r23, Y+40	; 0x28
    23ee:	89 a5       	ldd	r24, Y+41	; 0x29
    23f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	4a ef       	ldi	r20, 0xFA	; 250
    23f8:	54 e4       	ldi	r21, 0x44	; 68
    23fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	8b a3       	std	Y+35, r24	; 0x23
    2404:	9c a3       	std	Y+36, r25	; 0x24
    2406:	ad a3       	std	Y+37, r26	; 0x25
    2408:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    240a:	6b a1       	ldd	r22, Y+35	; 0x23
    240c:	7c a1       	ldd	r23, Y+36	; 0x24
    240e:	8d a1       	ldd	r24, Y+37	; 0x25
    2410:	9e a1       	ldd	r25, Y+38	; 0x26
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e8       	ldi	r20, 0x80	; 128
    2418:	5f e3       	ldi	r21, 0x3F	; 63
    241a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    241e:	88 23       	and	r24, r24
    2420:	2c f4       	brge	.+10     	; 0x242c <LCD_voidLatch+0x4da>
		__ticks = 1;
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	9a a3       	std	Y+34, r25	; 0x22
    2428:	89 a3       	std	Y+33, r24	; 0x21
    242a:	3f c0       	rjmp	.+126    	; 0x24aa <LCD_voidLatch+0x558>
	else if (__tmp > 65535)
    242c:	6b a1       	ldd	r22, Y+35	; 0x23
    242e:	7c a1       	ldd	r23, Y+36	; 0x24
    2430:	8d a1       	ldd	r24, Y+37	; 0x25
    2432:	9e a1       	ldd	r25, Y+38	; 0x26
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	3f ef       	ldi	r19, 0xFF	; 255
    2438:	4f e7       	ldi	r20, 0x7F	; 127
    243a:	57 e4       	ldi	r21, 0x47	; 71
    243c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2440:	18 16       	cp	r1, r24
    2442:	4c f5       	brge	.+82     	; 0x2496 <LCD_voidLatch+0x544>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2444:	6f a1       	ldd	r22, Y+39	; 0x27
    2446:	78 a5       	ldd	r23, Y+40	; 0x28
    2448:	89 a5       	ldd	r24, Y+41	; 0x29
    244a:	9a a5       	ldd	r25, Y+42	; 0x2a
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	40 e2       	ldi	r20, 0x20	; 32
    2452:	51 e4       	ldi	r21, 0x41	; 65
    2454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	bc 01       	movw	r22, r24
    245e:	cd 01       	movw	r24, r26
    2460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	9a a3       	std	Y+34, r25	; 0x22
    246a:	89 a3       	std	Y+33, r24	; 0x21
    246c:	0f c0       	rjmp	.+30     	; 0x248c <LCD_voidLatch+0x53a>
    246e:	88 ec       	ldi	r24, 0xC8	; 200
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	98 a3       	std	Y+32, r25	; 0x20
    2474:	8f 8f       	std	Y+31, r24	; 0x1f
    2476:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2478:	98 a1       	ldd	r25, Y+32	; 0x20
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	f1 f7       	brne	.-4      	; 0x247a <LCD_voidLatch+0x528>
    247e:	98 a3       	std	Y+32, r25	; 0x20
    2480:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2482:	89 a1       	ldd	r24, Y+33	; 0x21
    2484:	9a a1       	ldd	r25, Y+34	; 0x22
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	9a a3       	std	Y+34, r25	; 0x22
    248a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248c:	89 a1       	ldd	r24, Y+33	; 0x21
    248e:	9a a1       	ldd	r25, Y+34	; 0x22
    2490:	00 97       	sbiw	r24, 0x00	; 0
    2492:	69 f7       	brne	.-38     	; 0x246e <LCD_voidLatch+0x51c>
    2494:	14 c0       	rjmp	.+40     	; 0x24be <LCD_voidLatch+0x56c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2496:	6b a1       	ldd	r22, Y+35	; 0x23
    2498:	7c a1       	ldd	r23, Y+36	; 0x24
    249a:	8d a1       	ldd	r24, Y+37	; 0x25
    249c:	9e a1       	ldd	r25, Y+38	; 0x26
    249e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	9a a3       	std	Y+34, r25	; 0x22
    24a8:	89 a3       	std	Y+33, r24	; 0x21
    24aa:	89 a1       	ldd	r24, Y+33	; 0x21
    24ac:	9a a1       	ldd	r25, Y+34	; 0x22
    24ae:	9e 8f       	std	Y+30, r25	; 0x1e
    24b0:	8d 8f       	std	Y+29, r24	; 0x1d
    24b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	f1 f7       	brne	.-4      	; 0x24b6 <LCD_voidLatch+0x564>
    24ba:	9e 8f       	std	Y+30, r25	; 0x1e
    24bc:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(2);

		DIO_voidSetPinValue( DATA_PORT , PIN7 , (COPY_u8Data >> 3) & 1);
    24be:	fe 01       	movw	r30, r28
    24c0:	eb 5a       	subi	r30, 0xAB	; 171
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	80 81       	ld	r24, Z
    24c6:	86 95       	lsr	r24
    24c8:	86 95       	lsr	r24
    24ca:	86 95       	lsr	r24
    24cc:	98 2f       	mov	r25, r24
    24ce:	91 70       	andi	r25, 0x01	; 1
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	67 e0       	ldi	r22, 0x07	; 7
    24d4:	49 2f       	mov	r20, r25
    24d6:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue( DATA_PORT , PIN6 , (COPY_u8Data >> 2) & 1);
    24da:	fe 01       	movw	r30, r28
    24dc:	eb 5a       	subi	r30, 0xAB	; 171
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	80 81       	ld	r24, Z
    24e2:	86 95       	lsr	r24
    24e4:	86 95       	lsr	r24
    24e6:	98 2f       	mov	r25, r24
    24e8:	91 70       	andi	r25, 0x01	; 1
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	66 e0       	ldi	r22, 0x06	; 6
    24ee:	49 2f       	mov	r20, r25
    24f0:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue( DATA_PORT , PIN5 , (COPY_u8Data >> 1) & 1);
    24f4:	fe 01       	movw	r30, r28
    24f6:	eb 5a       	subi	r30, 0xAB	; 171
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	80 81       	ld	r24, Z
    24fc:	86 95       	lsr	r24
    24fe:	98 2f       	mov	r25, r24
    2500:	91 70       	andi	r25, 0x01	; 1
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	65 e0       	ldi	r22, 0x05	; 5
    2506:	49 2f       	mov	r20, r25
    2508:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue( DATA_PORT , PIN4 , (COPY_u8Data >> 0) & 1);
    250c:	fe 01       	movw	r30, r28
    250e:	eb 5a       	subi	r30, 0xAB	; 171
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	80 81       	ld	r24, Z
    2514:	98 2f       	mov	r25, r24
    2516:	91 70       	andi	r25, 0x01	; 1
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	64 e0       	ldi	r22, 0x04	; 4
    251c:	49 2f       	mov	r20, r25
    251e:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
			/*          EN=1                    */
			   DIO_voidSetPinValue(CONTROL_PORT , EN  , HIGH);
    2522:	82 e0       	ldi	r24, 0x02	; 2
    2524:	62 e0       	ldi	r22, 0x02	; 2
    2526:	41 e0       	ldi	r20, 0x01	; 1
    2528:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	a0 e0       	ldi	r26, 0x00	; 0
    2532:	b0 e4       	ldi	r27, 0x40	; 64
    2534:	89 8f       	std	Y+25, r24	; 0x19
    2536:	9a 8f       	std	Y+26, r25	; 0x1a
    2538:	ab 8f       	std	Y+27, r26	; 0x1b
    253a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253c:	69 8d       	ldd	r22, Y+25	; 0x19
    253e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2540:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2542:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	4a ef       	ldi	r20, 0xFA	; 250
    254a:	54 e4       	ldi	r21, 0x44	; 68
    254c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	8d 8b       	std	Y+21, r24	; 0x15
    2556:	9e 8b       	std	Y+22, r25	; 0x16
    2558:	af 8b       	std	Y+23, r26	; 0x17
    255a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    255c:	6d 89       	ldd	r22, Y+21	; 0x15
    255e:	7e 89       	ldd	r23, Y+22	; 0x16
    2560:	8f 89       	ldd	r24, Y+23	; 0x17
    2562:	98 8d       	ldd	r25, Y+24	; 0x18
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e8       	ldi	r20, 0x80	; 128
    256a:	5f e3       	ldi	r21, 0x3F	; 63
    256c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2570:	88 23       	and	r24, r24
    2572:	2c f4       	brge	.+10     	; 0x257e <LCD_voidLatch+0x62c>
		__ticks = 1;
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	9c 8b       	std	Y+20, r25	; 0x14
    257a:	8b 8b       	std	Y+19, r24	; 0x13
    257c:	3f c0       	rjmp	.+126    	; 0x25fc <LCD_voidLatch+0x6aa>
	else if (__tmp > 65535)
    257e:	6d 89       	ldd	r22, Y+21	; 0x15
    2580:	7e 89       	ldd	r23, Y+22	; 0x16
    2582:	8f 89       	ldd	r24, Y+23	; 0x17
    2584:	98 8d       	ldd	r25, Y+24	; 0x18
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	3f ef       	ldi	r19, 0xFF	; 255
    258a:	4f e7       	ldi	r20, 0x7F	; 127
    258c:	57 e4       	ldi	r21, 0x47	; 71
    258e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2592:	18 16       	cp	r1, r24
    2594:	4c f5       	brge	.+82     	; 0x25e8 <LCD_voidLatch+0x696>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2596:	69 8d       	ldd	r22, Y+25	; 0x19
    2598:	7a 8d       	ldd	r23, Y+26	; 0x1a
    259a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    259c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e2       	ldi	r20, 0x20	; 32
    25a4:	51 e4       	ldi	r21, 0x41	; 65
    25a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	bc 01       	movw	r22, r24
    25b0:	cd 01       	movw	r24, r26
    25b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	9c 8b       	std	Y+20, r25	; 0x14
    25bc:	8b 8b       	std	Y+19, r24	; 0x13
    25be:	0f c0       	rjmp	.+30     	; 0x25de <LCD_voidLatch+0x68c>
    25c0:	88 ec       	ldi	r24, 0xC8	; 200
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	9a 8b       	std	Y+18, r25	; 0x12
    25c6:	89 8b       	std	Y+17, r24	; 0x11
    25c8:	89 89       	ldd	r24, Y+17	; 0x11
    25ca:	9a 89       	ldd	r25, Y+18	; 0x12
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <LCD_voidLatch+0x67a>
    25d0:	9a 8b       	std	Y+18, r25	; 0x12
    25d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d4:	8b 89       	ldd	r24, Y+19	; 0x13
    25d6:	9c 89       	ldd	r25, Y+20	; 0x14
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	9c 8b       	std	Y+20, r25	; 0x14
    25dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25de:	8b 89       	ldd	r24, Y+19	; 0x13
    25e0:	9c 89       	ldd	r25, Y+20	; 0x14
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	69 f7       	brne	.-38     	; 0x25c0 <LCD_voidLatch+0x66e>
    25e6:	14 c0       	rjmp	.+40     	; 0x2610 <LCD_voidLatch+0x6be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e8:	6d 89       	ldd	r22, Y+21	; 0x15
    25ea:	7e 89       	ldd	r23, Y+22	; 0x16
    25ec:	8f 89       	ldd	r24, Y+23	; 0x17
    25ee:	98 8d       	ldd	r25, Y+24	; 0x18
    25f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	9c 8b       	std	Y+20, r25	; 0x14
    25fa:	8b 8b       	std	Y+19, r24	; 0x13
    25fc:	8b 89       	ldd	r24, Y+19	; 0x13
    25fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2600:	98 8b       	std	Y+16, r25	; 0x10
    2602:	8f 87       	std	Y+15, r24	; 0x0f
    2604:	8f 85       	ldd	r24, Y+15	; 0x0f
    2606:	98 89       	ldd	r25, Y+16	; 0x10
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	f1 f7       	brne	.-4      	; 0x2608 <LCD_voidLatch+0x6b6>
    260c:	98 8b       	std	Y+16, r25	; 0x10
    260e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(2);
			   /*          EN=0                    */
			   DIO_voidSetPinValue(CONTROL_PORT , EN  , LOW);
    2610:	82 e0       	ldi	r24, 0x02	; 2
    2612:	62 e0       	ldi	r22, 0x02	; 2
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	a0 e0       	ldi	r26, 0x00	; 0
    2620:	b0 e4       	ldi	r27, 0x40	; 64
    2622:	8b 87       	std	Y+11, r24	; 0x0b
    2624:	9c 87       	std	Y+12, r25	; 0x0c
    2626:	ad 87       	std	Y+13, r26	; 0x0d
    2628:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262a:	6b 85       	ldd	r22, Y+11	; 0x0b
    262c:	7c 85       	ldd	r23, Y+12	; 0x0c
    262e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2630:	9e 85       	ldd	r25, Y+14	; 0x0e
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	4a ef       	ldi	r20, 0xFA	; 250
    2638:	54 e4       	ldi	r21, 0x44	; 68
    263a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	8f 83       	std	Y+7, r24	; 0x07
    2644:	98 87       	std	Y+8, r25	; 0x08
    2646:	a9 87       	std	Y+9, r26	; 0x09
    2648:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    264a:	6f 81       	ldd	r22, Y+7	; 0x07
    264c:	78 85       	ldd	r23, Y+8	; 0x08
    264e:	89 85       	ldd	r24, Y+9	; 0x09
    2650:	9a 85       	ldd	r25, Y+10	; 0x0a
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	40 e8       	ldi	r20, 0x80	; 128
    2658:	5f e3       	ldi	r21, 0x3F	; 63
    265a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    265e:	88 23       	and	r24, r24
    2660:	2c f4       	brge	.+10     	; 0x266c <LCD_voidLatch+0x71a>
		__ticks = 1;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	9e 83       	std	Y+6, r25	; 0x06
    2668:	8d 83       	std	Y+5, r24	; 0x05
    266a:	3f c0       	rjmp	.+126    	; 0x26ea <LCD_voidLatch+0x798>
	else if (__tmp > 65535)
    266c:	6f 81       	ldd	r22, Y+7	; 0x07
    266e:	78 85       	ldd	r23, Y+8	; 0x08
    2670:	89 85       	ldd	r24, Y+9	; 0x09
    2672:	9a 85       	ldd	r25, Y+10	; 0x0a
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	3f ef       	ldi	r19, 0xFF	; 255
    2678:	4f e7       	ldi	r20, 0x7F	; 127
    267a:	57 e4       	ldi	r21, 0x47	; 71
    267c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2680:	18 16       	cp	r1, r24
    2682:	4c f5       	brge	.+82     	; 0x26d6 <LCD_voidLatch+0x784>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2684:	6b 85       	ldd	r22, Y+11	; 0x0b
    2686:	7c 85       	ldd	r23, Y+12	; 0x0c
    2688:	8d 85       	ldd	r24, Y+13	; 0x0d
    268a:	9e 85       	ldd	r25, Y+14	; 0x0e
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e2       	ldi	r20, 0x20	; 32
    2692:	51 e4       	ldi	r21, 0x41	; 65
    2694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	bc 01       	movw	r22, r24
    269e:	cd 01       	movw	r24, r26
    26a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	9e 83       	std	Y+6, r25	; 0x06
    26aa:	8d 83       	std	Y+5, r24	; 0x05
    26ac:	0f c0       	rjmp	.+30     	; 0x26cc <LCD_voidLatch+0x77a>
    26ae:	88 ec       	ldi	r24, 0xC8	; 200
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	9c 83       	std	Y+4, r25	; 0x04
    26b4:	8b 83       	std	Y+3, r24	; 0x03
    26b6:	8b 81       	ldd	r24, Y+3	; 0x03
    26b8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <LCD_voidLatch+0x768>
    26be:	9c 83       	std	Y+4, r25	; 0x04
    26c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c2:	8d 81       	ldd	r24, Y+5	; 0x05
    26c4:	9e 81       	ldd	r25, Y+6	; 0x06
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	9e 83       	std	Y+6, r25	; 0x06
    26ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26cc:	8d 81       	ldd	r24, Y+5	; 0x05
    26ce:	9e 81       	ldd	r25, Y+6	; 0x06
    26d0:	00 97       	sbiw	r24, 0x00	; 0
    26d2:	69 f7       	brne	.-38     	; 0x26ae <LCD_voidLatch+0x75c>
    26d4:	14 c0       	rjmp	.+40     	; 0x26fe <LCD_voidLatch+0x7ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d6:	6f 81       	ldd	r22, Y+7	; 0x07
    26d8:	78 85       	ldd	r23, Y+8	; 0x08
    26da:	89 85       	ldd	r24, Y+9	; 0x09
    26dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	9e 83       	std	Y+6, r25	; 0x06
    26e8:	8d 83       	std	Y+5, r24	; 0x05
    26ea:	8d 81       	ldd	r24, Y+5	; 0x05
    26ec:	9e 81       	ldd	r25, Y+6	; 0x06
    26ee:	9a 83       	std	Y+2, r25	; 0x02
    26f0:	89 83       	std	Y+1, r24	; 0x01
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	9a 81       	ldd	r25, Y+2	; 0x02
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	f1 f7       	brne	.-4      	; 0x26f6 <LCD_voidLatch+0x7a4>
    26fa:	9a 83       	std	Y+2, r25	; 0x02
    26fc:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(2);
		}

}
    26fe:	cb 5a       	subi	r28, 0xAB	; 171
    2700:	df 4f       	sbci	r29, 0xFF	; 255
    2702:	0f b6       	in	r0, 0x3f	; 63
    2704:	f8 94       	cli
    2706:	de bf       	out	0x3e, r29	; 62
    2708:	0f be       	out	0x3f, r0	; 63
    270a:	cd bf       	out	0x3d, r28	; 61
    270c:	cf 91       	pop	r28
    270e:	df 91       	pop	r29
    2710:	1f 91       	pop	r17
    2712:	0f 91       	pop	r16
    2714:	08 95       	ret

00002716 <TIMER0_Overflow_voidInit>:

void (*TIMER0_overflow_callBack)(void) = NULL ;
void (*TIMER0_CTC_callBack)(void) = NULL ;

void TIMER0_Overflow_voidInit(void)
{
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
	//overflow mode
	CLR_BIT(TCCR0,WGM01);
    271e:	a3 e5       	ldi	r26, 0x53	; 83
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	e3 e5       	ldi	r30, 0x53	; 83
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	87 7f       	andi	r24, 0xF7	; 247
    272a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,WGM00);
    272c:	a3 e5       	ldi	r26, 0x53	; 83
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	e3 e5       	ldi	r30, 0x53	; 83
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	8f 7b       	andi	r24, 0xBF	; 191
    2738:	8c 93       	st	X, r24
	
	//prescaler=8
	CLR_BIT(TCCR0,CS00);
    273a:	a3 e5       	ldi	r26, 0x53	; 83
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	e3 e5       	ldi	r30, 0x53	; 83
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	8e 7f       	andi	r24, 0xFE	; 254
    2746:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    2748:	a3 e5       	ldi	r26, 0x53	; 83
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	e3 e5       	ldi	r30, 0x53	; 83
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	82 60       	ori	r24, 0x02	; 2
    2754:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02);
    2756:	a3 e5       	ldi	r26, 0x53	; 83
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e3 e5       	ldi	r30, 0x53	; 83
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	8b 7f       	andi	r24, 0xFB	; 251
    2762:	8c 93       	st	X, r24
	
	//periphral enable
	SET_BIT(TIMSK,TOIE);
    2764:	a9 e5       	ldi	r26, 0x59	; 89
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	e9 e5       	ldi	r30, 0x59	; 89
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	81 60       	ori	r24, 0x01	; 1
    2770:	8c 93       	st	X, r24

	//preload value = 192
	TCNT0=0xC0;
    2772:	e2 e5       	ldi	r30, 0x52	; 82
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 ec       	ldi	r24, 0xC0	; 192
    2778:	80 83       	st	Z, r24

}
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	08 95       	ret

00002780 <TIMER0_voidInit_CTC_Mood>:

void TIMER0_voidInit_CTC_Mood(void)
{
    2780:	df 93       	push	r29
    2782:	cf 93       	push	r28
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
	//CTC mode
	SET_BIT(TCCR0,WGM01);
    2788:	a3 e5       	ldi	r26, 0x53	; 83
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	e3 e5       	ldi	r30, 0x53	; 83
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	80 81       	ld	r24, Z
    2792:	88 60       	ori	r24, 0x08	; 8
    2794:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,WGM00);
    2796:	a3 e5       	ldi	r26, 0x53	; 83
    2798:	b0 e0       	ldi	r27, 0x00	; 0
    279a:	e3 e5       	ldi	r30, 0x53	; 83
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	80 81       	ld	r24, Z
    27a0:	8f 7b       	andi	r24, 0xBF	; 191
    27a2:	8c 93       	st	X, r24

	//prescaler=64
	SET_BIT(TCCR0,CS00);
    27a4:	a3 e5       	ldi	r26, 0x53	; 83
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	e3 e5       	ldi	r30, 0x53	; 83
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	81 60       	ori	r24, 0x01	; 1
    27b0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    27b2:	a3 e5       	ldi	r26, 0x53	; 83
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	e3 e5       	ldi	r30, 0x53	; 83
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	82 60       	ori	r24, 0x02	; 2
    27be:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02);
    27c0:	a3 e5       	ldi	r26, 0x53	; 83
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	e3 e5       	ldi	r30, 0x53	; 83
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	80 81       	ld	r24, Z
    27ca:	8b 7f       	andi	r24, 0xFB	; 251
    27cc:	8c 93       	st	X, r24

	//OCR0=125
	OCR0=0x7D;
    27ce:	ec e5       	ldi	r30, 0x5C	; 92
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	8d e7       	ldi	r24, 0x7D	; 125
    27d4:	80 83       	st	Z, r24

	//periphral enable
	SET_BIT(TIMSK,OCIE0);
    27d6:	a9 e5       	ldi	r26, 0x59	; 89
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	e9 e5       	ldi	r30, 0x59	; 89
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	82 60       	ori	r24, 0x02	; 2
    27e2:	8c 93       	st	X, r24

}
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <TIMER0_voidInit_FastPWM_Mood>:
void TIMER0_voidInit_FastPWM_Mood(void)
{
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
	//Fast PWM mode
	SET_BIT(TCCR0,WGM01);
    27f2:	a3 e5       	ldi	r26, 0x53	; 83
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	e3 e5       	ldi	r30, 0x53	; 83
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
    27fc:	88 60       	ori	r24, 0x08	; 8
    27fe:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM00);
    2800:	a3 e5       	ldi	r26, 0x53	; 83
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	e3 e5       	ldi	r30, 0x53	; 83
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	80 64       	ori	r24, 0x40	; 64
    280c:	8c 93       	st	X, r24

	//non inverted pwm
	CLR_BIT(TCCR0,COM00);
    280e:	a3 e5       	ldi	r26, 0x53	; 83
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	e3 e5       	ldi	r30, 0x53	; 83
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	8f 7e       	andi	r24, 0xEF	; 239
    281a:	8c 93       	st	X, r24
    SET_BIT(TCCR0,COM01);
    281c:	a3 e5       	ldi	r26, 0x53	; 83
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	e3 e5       	ldi	r30, 0x53	; 83
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	80 62       	ori	r24, 0x20	; 32
    2828:	8c 93       	st	X, r24

	//prescaler=64
	SET_BIT(TCCR0,CS00);
    282a:	a3 e5       	ldi	r26, 0x53	; 83
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	e3 e5       	ldi	r30, 0x53	; 83
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	81 60       	ori	r24, 0x01	; 1
    2836:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    2838:	a3 e5       	ldi	r26, 0x53	; 83
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	e3 e5       	ldi	r30, 0x53	; 83
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	82 60       	ori	r24, 0x02	; 2
    2844:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02);
    2846:	a3 e5       	ldi	r26, 0x53	; 83
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	e3 e5       	ldi	r30, 0x53	; 83
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	8b 7f       	andi	r24, 0xFB	; 251
    2852:	8c 93       	st	X, r24

}
    2854:	cf 91       	pop	r28
    2856:	df 91       	pop	r29
    2858:	08 95       	ret

0000285a <TIMER0_voidSetDutuCycle>:

void TIMER0_voidSetDutuCycle(u8 COPY_u8Matching)
{
    285a:	df 93       	push	r29
    285c:	cf 93       	push	r28
    285e:	0f 92       	push	r0
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
    2864:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = COPY_u8Matching;
    2866:	ec e5       	ldi	r30, 0x5C	; 92
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	80 83       	st	Z, r24
}
    286e:	0f 90       	pop	r0
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	08 95       	ret

00002876 <TIMER0_overflow_voidSetCallBack>:

void TIMER0_overflow_voidSetCallBack(void (*pf)(void))
{
    2876:	df 93       	push	r29
    2878:	cf 93       	push	r28
    287a:	00 d0       	rcall	.+0      	; 0x287c <TIMER0_overflow_voidSetCallBack+0x6>
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
    2880:	9a 83       	std	Y+2, r25	; 0x02
    2882:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_overflow_callBack=pf;
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	9a 81       	ldd	r25, Y+2	; 0x02
    2888:	90 93 e6 00 	sts	0x00E6, r25
    288c:	80 93 e5 00 	sts	0x00E5, r24
}
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	cf 91       	pop	r28
    2896:	df 91       	pop	r29
    2898:	08 95       	ret

0000289a <__vector_11>:

void __vector_11(void)  __attribute__((signal,used));

void __vector_11 (void)
{
    289a:	1f 92       	push	r1
    289c:	0f 92       	push	r0
    289e:	0f b6       	in	r0, 0x3f	; 63
    28a0:	0f 92       	push	r0
    28a2:	11 24       	eor	r1, r1
    28a4:	2f 93       	push	r18
    28a6:	3f 93       	push	r19
    28a8:	4f 93       	push	r20
    28aa:	5f 93       	push	r21
    28ac:	6f 93       	push	r22
    28ae:	7f 93       	push	r23
    28b0:	8f 93       	push	r24
    28b2:	9f 93       	push	r25
    28b4:	af 93       	push	r26
    28b6:	bf 93       	push	r27
    28b8:	ef 93       	push	r30
    28ba:	ff 93       	push	r31
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
	TIMER0_overflow_callBack();
    28c4:	e0 91 e5 00 	lds	r30, 0x00E5
    28c8:	f0 91 e6 00 	lds	r31, 0x00E6
    28cc:	09 95       	icall
}
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	ff 91       	pop	r31
    28d4:	ef 91       	pop	r30
    28d6:	bf 91       	pop	r27
    28d8:	af 91       	pop	r26
    28da:	9f 91       	pop	r25
    28dc:	8f 91       	pop	r24
    28de:	7f 91       	pop	r23
    28e0:	6f 91       	pop	r22
    28e2:	5f 91       	pop	r21
    28e4:	4f 91       	pop	r20
    28e6:	3f 91       	pop	r19
    28e8:	2f 91       	pop	r18
    28ea:	0f 90       	pop	r0
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	0f 90       	pop	r0
    28f0:	1f 90       	pop	r1
    28f2:	18 95       	reti

000028f4 <TIMER0_CTC_voidSetCallBack>:


void TIMER0_CTC_voidSetCallBack(void (*pf)(void))
{
    28f4:	df 93       	push	r29
    28f6:	cf 93       	push	r28
    28f8:	00 d0       	rcall	.+0      	; 0x28fa <TIMER0_CTC_voidSetCallBack+0x6>
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
    28fe:	9a 83       	std	Y+2, r25	; 0x02
    2900:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CTC_callBack=pf;
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	9a 81       	ldd	r25, Y+2	; 0x02
    2906:	90 93 e8 00 	sts	0x00E8, r25
    290a:	80 93 e7 00 	sts	0x00E7, r24
}
    290e:	0f 90       	pop	r0
    2910:	0f 90       	pop	r0
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	08 95       	ret

00002918 <__vector_10>:

void __vector_10(void)  __attribute__((signal,used));

void __vector_10 (void)
{
    2918:	1f 92       	push	r1
    291a:	0f 92       	push	r0
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	0f 92       	push	r0
    2920:	11 24       	eor	r1, r1
    2922:	2f 93       	push	r18
    2924:	3f 93       	push	r19
    2926:	4f 93       	push	r20
    2928:	5f 93       	push	r21
    292a:	6f 93       	push	r22
    292c:	7f 93       	push	r23
    292e:	8f 93       	push	r24
    2930:	9f 93       	push	r25
    2932:	af 93       	push	r26
    2934:	bf 93       	push	r27
    2936:	ef 93       	push	r30
    2938:	ff 93       	push	r31
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CTC_callBack();
    2942:	e0 91 e7 00 	lds	r30, 0x00E7
    2946:	f0 91 e8 00 	lds	r31, 0x00E8
    294a:	09 95       	icall
}
    294c:	cf 91       	pop	r28
    294e:	df 91       	pop	r29
    2950:	ff 91       	pop	r31
    2952:	ef 91       	pop	r30
    2954:	bf 91       	pop	r27
    2956:	af 91       	pop	r26
    2958:	9f 91       	pop	r25
    295a:	8f 91       	pop	r24
    295c:	7f 91       	pop	r23
    295e:	6f 91       	pop	r22
    2960:	5f 91       	pop	r21
    2962:	4f 91       	pop	r20
    2964:	3f 91       	pop	r19
    2966:	2f 91       	pop	r18
    2968:	0f 90       	pop	r0
    296a:	0f be       	out	0x3f, r0	; 63
    296c:	0f 90       	pop	r0
    296e:	1f 90       	pop	r1
    2970:	18 95       	reti

00002972 <UART_VoidInit>:
#include "UART_interface.h"
#include "UART_private.h"
#include "UART_config.h"

void UART_VoidInit(void)
{
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	0f 92       	push	r0
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
	u8 UCSRC_R =0;		// Use to write on UCSRB oncex
    297c:	19 82       	std	Y+1, r1	; 0x01
	//Enable Rx && TX  (Register B)
	SET_BIT(UCSRB,RXEN);	//Receiver Enable
    297e:	aa e2       	ldi	r26, 0x2A	; 42
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	ea e2       	ldi	r30, 0x2A	; 42
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	80 81       	ld	r24, Z
    2988:	80 61       	ori	r24, 0x10	; 16
    298a:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);	//Transmitter Enable
    298c:	aa e2       	ldi	r26, 0x2A	; 42
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	ea e2       	ldi	r30, 0x2A	; 42
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	80 81       	ld	r24, Z
    2996:	88 60       	ori	r24, 0x08	; 8
    2998:	8c 93       	st	X, r24
	
	//UART select mode (Register C) : Asynchronous mode 
	CLR_BIT(UCSRC_R,UMSEL);	//USART Mode Select
    299a:	89 81       	ldd	r24, Y+1	; 0x01
    299c:	8f 7b       	andi	r24, 0xBF	; 191
    299e:	89 83       	std	Y+1, r24	; 0x01
	
	//disenable parity mode 
	CLR_BIT(UCSRC_R,UPM1);	//USART Mode Select
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	8f 7d       	andi	r24, 0xDF	; 223
    29a4:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_R,UPM0);	//USART Mode Select
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	8f 7e       	andi	r24, 0xEF	; 239
    29aa:	89 83       	std	Y+1, r24	; 0x01
	
	//STOP BIT : 1-BIT
	CLR_BIT(UCSRC_R,USBS);	//Stop Bit Select
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	87 7f       	andi	r24, 0xF7	; 247
    29b0:	89 83       	std	Y+1, r24	; 0x01
	
	//Character Size : 8 bit 
	SET_BIT(UCSRC_R,UCSZ0);
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	82 60       	ori	r24, 0x02	; 2
    29b6:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_R,UCSZ1);
    29b8:	89 81       	ldd	r24, Y+1	; 0x01
    29ba:	84 60       	ori	r24, 0x04	; 4
    29bc:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB,UCSZ2);	
    29be:	aa e2       	ldi	r26, 0x2A	; 42
    29c0:	b0 e0       	ldi	r27, 0x00	; 0
    29c2:	ea e2       	ldi	r30, 0x2A	; 42
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	80 81       	ld	r24, Z
    29c8:	8b 7f       	andi	r24, 0xFB	; 251
    29ca:	8c 93       	st	X, r24
	
	// SET BIT 7 TO Ready to write
	SET_BIT(UCSRC_R ,URSEL);
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	80 68       	ori	r24, 0x80	; 128
    29d0:	89 83       	std	Y+1, r24	; 0x01
	UCSRC = UCSRC_R ;
    29d2:	e0 e4       	ldi	r30, 0x40	; 64
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	80 83       	st	Z, r24
	//baud rate  :9600 && 8MHz

	/*  Store the low byte of the UBBR*/
	UBRRL = (u8)(LOC_baudEquation);
    29da:	e9 e2       	ldi	r30, 0x29	; 41
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	83 e3       	ldi	r24, 0x33	; 51
    29e0:	80 83       	st	Z, r24
	 /*  Store the High byte of the UBBR*/
	UBRRH =(u8)(LOC_baudEquation>>8);
    29e2:	e0 e4       	ldi	r30, 0x40	; 64
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	10 82       	st	Z, r1


//	UBRRL =51;
//	UBRRH =0;
		
}
    29e8:	0f 90       	pop	r0
    29ea:	cf 91       	pop	r28
    29ec:	df 91       	pop	r29
    29ee:	08 95       	ret

000029f0 <UART_VoidTransmit>:
void UART_VoidTransmit(u8 DATA)
{
    29f0:	df 93       	push	r29
    29f2:	cf 93       	push	r28
    29f4:	00 d0       	rcall	.+0      	; 0x29f6 <UART_VoidTransmit+0x6>
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    29fa:	89 83       	std	Y+1, r24	; 0x01
	//check if Data register is empty or not 
	while( GET_BIT(UCSRA , UDRE)==0 )	//USART Data Register Empty
    29fc:	eb e2       	ldi	r30, 0x2B	; 43
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
	{
		
	}
	UDR =DATA ;
    2a02:	ec e2       	ldi	r30, 0x2C	; 44
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	80 83       	st	Z, r24
}
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	cf 91       	pop	r28
    2a10:	df 91       	pop	r29
    2a12:	08 95       	ret

00002a14 <UART_VidSend>:
void UART_VidSend(u8 *LOC_u8Data){
    2a14:	df 93       	push	r29
    2a16:	cf 93       	push	r28
    2a18:	00 d0       	rcall	.+0      	; 0x2a1a <UART_VidSend+0x6>
    2a1a:	0f 92       	push	r0
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
    2a20:	9b 83       	std	Y+3, r25	; 0x03
    2a22:	8a 83       	std	Y+2, r24	; 0x02
u8 i=0;
    2a24:	19 82       	std	Y+1, r1	; 0x01
for(i=0;LOC_u8Data[i]!=0;i++){
    2a26:	19 82       	std	Y+1, r1	; 0x01
    2a28:	18 c0       	rjmp	.+48     	; 0x2a5a <UART_VidSend+0x46>
	while(0==GET_BIT(UCSRA,6));
    2a2a:	eb e2       	ldi	r30, 0x2B	; 43
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	82 95       	swap	r24
    2a32:	86 95       	lsr	r24
    2a34:	86 95       	lsr	r24
    2a36:	83 70       	andi	r24, 0x03	; 3
    2a38:	88 23       	and	r24, r24
    2a3a:	b9 f3       	breq	.-18     	; 0x2a2a <UART_VidSend+0x16>
	UDR=LOC_u8Data[i];
    2a3c:	ac e2       	ldi	r26, 0x2C	; 44
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	28 2f       	mov	r18, r24
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	8a 81       	ldd	r24, Y+2	; 0x02
    2a48:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	e2 0f       	add	r30, r18
    2a4e:	f3 1f       	adc	r31, r19
    2a50:	80 81       	ld	r24, Z
    2a52:	8c 93       	st	X, r24
	}
	UDR =DATA ;
}
void UART_VidSend(u8 *LOC_u8Data){
u8 i=0;
for(i=0;LOC_u8Data[i]!=0;i++){
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	8f 5f       	subi	r24, 0xFF	; 255
    2a58:	89 83       	std	Y+1, r24	; 0x01
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	28 2f       	mov	r18, r24
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	8a 81       	ldd	r24, Y+2	; 0x02
    2a62:	9b 81       	ldd	r25, Y+3	; 0x03
    2a64:	fc 01       	movw	r30, r24
    2a66:	e2 0f       	add	r30, r18
    2a68:	f3 1f       	adc	r31, r19
    2a6a:	80 81       	ld	r24, Z
    2a6c:	88 23       	and	r24, r24
    2a6e:	e9 f6       	brne	.-70     	; 0x2a2a <UART_VidSend+0x16>
	while(0==GET_BIT(UCSRA,6));
	UDR=LOC_u8Data[i];
	}
}
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	0f 90       	pop	r0
    2a76:	cf 91       	pop	r28
    2a78:	df 91       	pop	r29
    2a7a:	08 95       	ret

00002a7c <UART_VoidRead>:
u8 UART_VoidRead(void)
{
    2a7c:	df 93       	push	r29
    2a7e:	cf 93       	push	r28
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
	//check if Data  is Received completely  or not
	
	while( (GET_BIT(UCSRA ,RXc)) ==0 )	//USART Receive Complete
    2a84:	eb e2       	ldi	r30, 0x2B	; 43
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	80 81       	ld	r24, Z
    2a8a:	88 23       	and	r24, r24
    2a8c:	dc f7       	brge	.-10     	; 0x2a84 <UART_VoidRead+0x8>
	{
		
	}
	return UDR;
    2a8e:	ec e2       	ldi	r30, 0x2C	; 44
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	80 81       	ld	r24, Z
	
}
    2a94:	cf 91       	pop	r28
    2a96:	df 91       	pop	r29
    2a98:	08 95       	ret

00002a9a <UART_sendString>:
void UART_sendString(const u8 *Str)
{
    2a9a:	df 93       	push	r29
    2a9c:	cf 93       	push	r28
    2a9e:	00 d0       	rcall	.+0      	; 0x2aa0 <UART_sendString+0x6>
    2aa0:	0f 92       	push	r0
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
    2aa6:	9b 83       	std	Y+3, r25	; 0x03
    2aa8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2aaa:	19 82       	std	Y+1, r1	; 0x01
    2aac:	0e c0       	rjmp	.+28     	; 0x2aca <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_VoidTransmit(Str[i]);
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab8:	fc 01       	movw	r30, r24
    2aba:	e2 0f       	add	r30, r18
    2abc:	f3 1f       	adc	r31, r19
    2abe:	80 81       	ld	r24, Z
    2ac0:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <UART_VoidTransmit>
		i++;
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
    2ac6:	8f 5f       	subi	r24, 0xFF	; 255
    2ac8:	89 83       	std	Y+1, r24	; 0x01
	
}
void UART_sendString(const u8 *Str)
{
	u8 i = 0;
	while(Str[i] != '\0')
    2aca:	89 81       	ldd	r24, Y+1	; 0x01
    2acc:	28 2f       	mov	r18, r24
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	e2 0f       	add	r30, r18
    2ad8:	f3 1f       	adc	r31, r19
    2ada:	80 81       	ld	r24, Z
    2adc:	88 23       	and	r24, r24
    2ade:	39 f7       	brne	.-50     	; 0x2aae <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	cf 91       	pop	r28
    2ae8:	df 91       	pop	r29
    2aea:	08 95       	ret

00002aec <Timer0_voidCount>:
/* Description    :  This function used to start conversion     */
/*                    every second.	                            */
/*					 return : void		 						*/
/****************************************************************/
void Timer0_voidCount (void)
{
    2aec:	df 93       	push	r29
    2aee:	cf 93       	push	r28
    2af0:	cd b7       	in	r28, 0x3d	; 61
    2af2:	de b7       	in	r29, 0x3e	; 62
	static u32 counter =0;
	counter++;
    2af4:	80 91 ed 00 	lds	r24, 0x00ED
    2af8:	90 91 ee 00 	lds	r25, 0x00EE
    2afc:	a0 91 ef 00 	lds	r26, 0x00EF
    2b00:	b0 91 f0 00 	lds	r27, 0x00F0
    2b04:	01 96       	adiw	r24, 0x01	; 1
    2b06:	a1 1d       	adc	r26, r1
    2b08:	b1 1d       	adc	r27, r1
    2b0a:	80 93 ed 00 	sts	0x00ED, r24
    2b0e:	90 93 ee 00 	sts	0x00EE, r25
    2b12:	a0 93 ef 00 	sts	0x00EF, r26
    2b16:	b0 93 f0 00 	sts	0x00F0, r27
	if (counter == 3907)
    2b1a:	80 91 ed 00 	lds	r24, 0x00ED
    2b1e:	90 91 ee 00 	lds	r25, 0x00EE
    2b22:	a0 91 ef 00 	lds	r26, 0x00EF
    2b26:	b0 91 f0 00 	lds	r27, 0x00F0
    2b2a:	83 34       	cpi	r24, 0x43	; 67
    2b2c:	2f e0       	ldi	r18, 0x0F	; 15
    2b2e:	92 07       	cpc	r25, r18
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	a2 07       	cpc	r26, r18
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	b2 07       	cpc	r27, r18
    2b38:	91 f4       	brne	.+36     	; 0x2b5e <Timer0_voidCount+0x72>
	{
		ADC_voidGetDigitalValue(0,&Global_u16ADCDigitalValue);
    2b3a:	29 ee       	ldi	r18, 0xE9	; 233
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	b9 01       	movw	r22, r18
    2b42:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <ADC_voidGetDigitalValue>

		counter=0;
    2b46:	10 92 ed 00 	sts	0x00ED, r1
    2b4a:	10 92 ee 00 	sts	0x00EE, r1
    2b4e:	10 92 ef 00 	sts	0x00EF, r1
    2b52:	10 92 f0 00 	sts	0x00F0, r1
		TCNT0=192;
    2b56:	e2 e5       	ldi	r30, 0x52	; 82
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	80 ec       	ldi	r24, 0xC0	; 192
    2b5c:	80 83       	st	Z, r24
	}
}
    2b5e:	cf 91       	pop	r28
    2b60:	df 91       	pop	r29
    2b62:	08 95       	ret

00002b64 <ADC_voidWarning>:
/*                    after conversion.                         */
/*					 return : void		 						*/
/****************************************************************/

void ADC_voidWarning (void)
{
    2b64:	df 93       	push	r29
    2b66:	cf 93       	push	r28
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62

	static u8 LOCAL_u8flag=0;   //to control warning message between temperature >40  || temperature <40

	Global_u16ADCAnalogValue = ((Global_u16ADCDigitalValue * 5000UL)/1024);
    2b6c:	80 91 e9 00 	lds	r24, 0x00E9
    2b70:	90 91 ea 00 	lds	r25, 0x00EA
    2b74:	cc 01       	movw	r24, r24
    2b76:	a0 e0       	ldi	r26, 0x00	; 0
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	28 e8       	ldi	r18, 0x88	; 136
    2b7c:	33 e1       	ldi	r19, 0x13	; 19
    2b7e:	40 e0       	ldi	r20, 0x00	; 0
    2b80:	50 e0       	ldi	r21, 0x00	; 0
    2b82:	bc 01       	movw	r22, r24
    2b84:	cd 01       	movw	r24, r26
    2b86:	0e 94 aa 18 	call	0x3154	; 0x3154 <__mulsi3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	07 2e       	mov	r0, r23
    2b90:	7a e0       	ldi	r23, 0x0A	; 10
    2b92:	b6 95       	lsr	r27
    2b94:	a7 95       	ror	r26
    2b96:	97 95       	ror	r25
    2b98:	87 95       	ror	r24
    2b9a:	7a 95       	dec	r23
    2b9c:	d1 f7       	brne	.-12     	; 0x2b92 <ADC_voidWarning+0x2e>
    2b9e:	70 2d       	mov	r23, r0
    2ba0:	90 93 ec 00 	sts	0x00EC, r25
    2ba4:	80 93 eb 00 	sts	0x00EB, r24
	Global_u16Temp = Global_u16ADCAnalogValue/10 ;
    2ba8:	80 91 eb 00 	lds	r24, 0x00EB
    2bac:	90 91 ec 00 	lds	r25, 0x00EC
    2bb0:	2a e0       	ldi	r18, 0x0A	; 10
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	b9 01       	movw	r22, r18
    2bb6:	0e 94 c9 18 	call	0x3192	; 0x3192 <__udivmodhi4>
    2bba:	cb 01       	movw	r24, r22
    2bbc:	90 93 f3 00 	sts	0x00F3, r25
    2bc0:	80 93 f2 00 	sts	0x00F2, r24

	if (Global_u16Temp >=40)
    2bc4:	80 91 f2 00 	lds	r24, 0x00F2
    2bc8:	90 91 f3 00 	lds	r25, 0x00F3
    2bcc:	88 32       	cpi	r24, 0x28	; 40
    2bce:	91 05       	cpc	r25, r1
    2bd0:	48 f1       	brcs	.+82     	; 0x2c24 <ADC_voidWarning+0xc0>
	{
		LCD_voidSendCMD(0x01);
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_voidSendCMD>
		LCD_voidWriteString("WARNING");
    2bd8:	80 e6       	ldi	r24, 0x60	; 96
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_voidWriteString>
		LCD_voidGoToXY(1,0);
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	60 e0       	ldi	r22, 0x00	; 0
    2be6:	70 e0       	ldi	r23, 0x00	; 0
    2be8:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <LCD_voidGoToXY>
		LCD_voidWriteString("TEMPERATURE =");
    2bec:	88 e6       	ldi	r24, 0x68	; 104
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_voidWriteString>
		LCD_voidWriteInt(Global_u16Temp);
    2bf4:	80 91 f2 00 	lds	r24, 0x00F2
    2bf8:	90 91 f3 00 	lds	r25, 0x00F3
    2bfc:	cc 01       	movw	r24, r24
    2bfe:	a0 e0       	ldi	r26, 0x00	; 0
    2c00:	b0 e0       	ldi	r27, 0x00	; 0
    2c02:	bc 01       	movw	r22, r24
    2c04:	cd 01       	movw	r24, r26
    2c06:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_voidWriteInt>
		DIO_voidSetPinValue(PORTC,PIN3,HIGH);//buzzer on
    2c0a:	82 e0       	ldi	r24, 0x02	; 2
    2c0c:	63 e0       	ldi	r22, 0x03	; 3
    2c0e:	41 e0       	ldi	r20, 0x01	; 1
    2c10:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
		DIO_voidTogglePine(PORTD,PIN3); //led
    2c14:	83 e0       	ldi	r24, 0x03	; 3
    2c16:	63 e0       	ldi	r22, 0x03	; 3
    2c18:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidTogglePine>
		LOCAL_u8flag=1;
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	80 93 f1 00 	sts	0x00F1, r24
    2c22:	13 c0       	rjmp	.+38     	; 0x2c4a <ADC_voidWarning+0xe6>

	}

	else
	{
		if (LOCAL_u8flag==1)
    2c24:	80 91 f1 00 	lds	r24, 0x00F1
    2c28:	81 30       	cpi	r24, 0x01	; 1
    2c2a:	79 f4       	brne	.+30     	; 0x2c4a <ADC_voidWarning+0xe6>
		{
			LCD_voidSendCMD(0x01);
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_voidSendCMD>
			DIO_voidSetPinValue(PORTC,PIN0,LOW);
    2c32:	82 e0       	ldi	r24, 0x02	; 2
    2c34:	60 e0       	ldi	r22, 0x00	; 0
    2c36:	40 e0       	ldi	r20, 0x00	; 0
    2c38:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORTD,PIN3,LOW);
    2c3c:	83 e0       	ldi	r24, 0x03	; 3
    2c3e:	63 e0       	ldi	r22, 0x03	; 3
    2c40:	40 e0       	ldi	r20, 0x00	; 0
    2c42:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
			LOCAL_u8flag=0;
    2c46:	10 92 f1 00 	sts	0x00F1, r1
		}

	}
		LOC_u8Value =UART_VoidRead();
    2c4a:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <UART_VoidRead>
    2c4e:	80 93 cf 00 	sts	0x00CF, r24
		if((LOC_u8Value ==5) ||(LOC_u8Value =='5') )
    2c52:	80 91 cf 00 	lds	r24, 0x00CF
    2c56:	85 30       	cpi	r24, 0x05	; 5
    2c58:	21 f0       	breq	.+8      	; 0x2c62 <ADC_voidWarning+0xfe>
    2c5a:	80 91 cf 00 	lds	r24, 0x00CF
    2c5e:	85 33       	cpi	r24, 0x35	; 53
    2c60:	29 f4       	brne	.+10     	; 0x2c6c <ADC_voidWarning+0x108>
		{
			DIO_voidSetPinValue(PORTC,PIN4,HIGH);	//Room1 on
    2c62:	82 e0       	ldi	r24, 0x02	; 2
    2c64:	64 e0       	ldi	r22, 0x04	; 4
    2c66:	41 e0       	ldi	r20, 0x01	; 1
    2c68:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>


		}
		if((LOC_u8Value =='4') ||(LOC_u8Value ==4) )
    2c6c:	80 91 cf 00 	lds	r24, 0x00CF
    2c70:	84 33       	cpi	r24, 0x34	; 52
    2c72:	21 f0       	breq	.+8      	; 0x2c7c <ADC_voidWarning+0x118>
    2c74:	80 91 cf 00 	lds	r24, 0x00CF
    2c78:	84 30       	cpi	r24, 0x04	; 4
    2c7a:	29 f4       	brne	.+10     	; 0x2c86 <ADC_voidWarning+0x122>
		{
			DIO_voidSetPinValue(PORTC,PIN4,LOW);	//Room1 off
    2c7c:	82 e0       	ldi	r24, 0x02	; 2
    2c7e:	64 e0       	ldi	r22, 0x04	; 4
    2c80:	40 e0       	ldi	r20, 0x00	; 0
    2c82:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>

		}

		if((LOC_u8Value ==7) ||(LOC_u8Value =='7') )
    2c86:	80 91 cf 00 	lds	r24, 0x00CF
    2c8a:	87 30       	cpi	r24, 0x07	; 7
    2c8c:	21 f0       	breq	.+8      	; 0x2c96 <ADC_voidWarning+0x132>
    2c8e:	80 91 cf 00 	lds	r24, 0x00CF
    2c92:	87 33       	cpi	r24, 0x37	; 55
    2c94:	29 f4       	brne	.+10     	; 0x2ca0 <ADC_voidWarning+0x13c>
		{
			DIO_voidSetPinValue(PORTC,PIN5,HIGH);	//Room2 on
    2c96:	82 e0       	ldi	r24, 0x02	; 2
    2c98:	65 e0       	ldi	r22, 0x05	; 5
    2c9a:	41 e0       	ldi	r20, 0x01	; 1
    2c9c:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>


		}
		if((LOC_u8Value =='6') ||(LOC_u8Value ==6) )
    2ca0:	80 91 cf 00 	lds	r24, 0x00CF
    2ca4:	86 33       	cpi	r24, 0x36	; 54
    2ca6:	21 f0       	breq	.+8      	; 0x2cb0 <ADC_voidWarning+0x14c>
    2ca8:	80 91 cf 00 	lds	r24, 0x00CF
    2cac:	86 30       	cpi	r24, 0x06	; 6
    2cae:	29 f4       	brne	.+10     	; 0x2cba <ADC_voidWarning+0x156>
		{
			DIO_voidSetPinValue(PORTC,PIN5,LOW);	//Room2 off
    2cb0:	82 e0       	ldi	r24, 0x02	; 2
    2cb2:	65 e0       	ldi	r22, 0x05	; 5
    2cb4:	40 e0       	ldi	r20, 0x00	; 0
    2cb6:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>

		}
		//lock door
		if((LOC_u8Value ==0) ||(LOC_u8Value =='0') )
    2cba:	80 91 cf 00 	lds	r24, 0x00CF
    2cbe:	88 23       	and	r24, r24
    2cc0:	21 f0       	breq	.+8      	; 0x2cca <ADC_voidWarning+0x166>
    2cc2:	80 91 cf 00 	lds	r24, 0x00CF
    2cc6:	80 33       	cpi	r24, 0x30	; 48
    2cc8:	29 f4       	brne	.+10     	; 0x2cd4 <ADC_voidWarning+0x170>
				{
					DIO_voidSetPinValue(PORTD,PIN2,LOW);	//door on
    2cca:	83 e0       	ldi	r24, 0x03	; 3
    2ccc:	62 e0       	ldi	r22, 0x02	; 2
    2cce:	40 e0       	ldi	r20, 0x00	; 0
    2cd0:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>


				}
				if((LOC_u8Value =='1') ||(LOC_u8Value ==1) )
    2cd4:	80 91 cf 00 	lds	r24, 0x00CF
    2cd8:	81 33       	cpi	r24, 0x31	; 49
    2cda:	21 f0       	breq	.+8      	; 0x2ce4 <ADC_voidWarning+0x180>
    2cdc:	80 91 cf 00 	lds	r24, 0x00CF
    2ce0:	81 30       	cpi	r24, 0x01	; 1
    2ce2:	29 f4       	brne	.+10     	; 0x2cee <ADC_voidWarning+0x18a>
				{
					DIO_voidSetPinValue(PORTD,PIN2,HIGH);	//door off
    2ce4:	83 e0       	ldi	r24, 0x03	; 3
    2ce6:	62 e0       	ldi	r22, 0x02	; 2
    2ce8:	41 e0       	ldi	r20, 0x01	; 1
    2cea:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>

				}



}
    2cee:	cf 91       	pop	r28
    2cf0:	df 91       	pop	r29
    2cf2:	08 95       	ret

00002cf4 <main>:

int main (void)
{
    2cf4:	df 93       	push	r29
    2cf6:	cf 93       	push	r28
    2cf8:	cd b7       	in	r28, 0x3d	; 61
    2cfa:	de b7       	in	r29, 0x3e	; 62
    2cfc:	e4 97       	sbiw	r28, 0x34	; 52
    2cfe:	0f b6       	in	r0, 0x3f	; 63
    2d00:	f8 94       	cli
    2d02:	de bf       	out	0x3e, r29	; 62
    2d04:	0f be       	out	0x3f, r0	; 63
    2d06:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDirection(PORTD ,PIN1,OUTPUT);
    2d08:	83 e0       	ldi	r24, 0x03	; 3
    2d0a:	61 e0       	ldi	r22, 0x01	; 1
    2d0c:	41 e0       	ldi	r20, 0x01	; 1
    2d0e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD ,PIN0,INPUT);
    2d12:	83 e0       	ldi	r24, 0x03	; 3
    2d14:	60 e0       	ldi	r22, 0x00	; 0
    2d16:	40 e0       	ldi	r20, 0x00	; 0
    2d18:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_voidSetPinDirection>
	UART_VoidInit();
    2d1c:	0e 94 b9 14 	call	0x2972	; 0x2972 <UART_VoidInit>


	DIO_voidSetPortDirection(PORTA,0xf0);             // A4 : A7 Data Port from processor to LCD
    2d20:	80 e0       	ldi	r24, 0x00	; 0
    2d22:	60 ef       	ldi	r22, 0xF0	; 240
    2d24:	0e 94 68 09 	call	0x12d0	; 0x12d0 <DIO_voidSetPortDirection>

	DIO_voidSetPinDirection(PORTD,PIN2,OUTPUT);       //led -->Door
    2d28:	83 e0       	ldi	r24, 0x03	; 3
    2d2a:	62 e0       	ldi	r22, 0x02	; 2
    2d2c:	41 e0       	ldi	r20, 0x01	; 1
    2d2e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD,PIN3,OUTPUT);       //led -->temperature
    2d32:	83 e0       	ldi	r24, 0x03	; 3
    2d34:	63 e0       	ldi	r22, 0x03	; 3
    2d36:	41 e0       	ldi	r20, 0x01	; 1
    2d38:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC,PIN3 ,OUTPUT);     //buzzer
    2d3c:	82 e0       	ldi	r24, 0x02	; 2
    2d3e:	63 e0       	ldi	r22, 0x03	; 3
    2d40:	41 e0       	ldi	r20, 0x01	; 1
    2d42:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC,PIN4,OUTPUT);       //led -->Room1
    2d46:	82 e0       	ldi	r24, 0x02	; 2
    2d48:	64 e0       	ldi	r22, 0x04	; 4
    2d4a:	41 e0       	ldi	r20, 0x01	; 1
    2d4c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC,PIN5,OUTPUT);       //led -->Room2
    2d50:	82 e0       	ldi	r24, 0x02	; 2
    2d52:	65 e0       	ldi	r22, 0x05	; 5
    2d54:	41 e0       	ldi	r20, 0x01	; 1
    2d56:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(CONTROL_PORT,RS,OUTPUT);  //PIN C0
    2d5a:	82 e0       	ldi	r24, 0x02	; 2
    2d5c:	60 e0       	ldi	r22, 0x00	; 0
    2d5e:	41 e0       	ldi	r20, 0x01	; 1
    2d60:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CONTROL_PORT,RW,OUTPUT);  //PIN C1
    2d64:	82 e0       	ldi	r24, 0x02	; 2
    2d66:	61 e0       	ldi	r22, 0x01	; 1
    2d68:	41 e0       	ldi	r20, 0x01	; 1
    2d6a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CONTROL_PORT,EN,OUTPUT);  //PIN C2
    2d6e:	82 e0       	ldi	r24, 0x02	; 2
    2d70:	62 e0       	ldi	r22, 0x02	; 2
    2d72:	41 e0       	ldi	r20, 0x01	; 1
    2d74:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_voidSetPinDirection>

	DIO_voidSetPortDirection(KYEPAD_PORT , 0x0f);     //keypad Port B
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	6f e0       	ldi	r22, 0x0F	; 15
    2d7c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <DIO_voidSetPortDirection>
	DIO_voidSetPortValue(KYEPAD_PORT,0xff);           //pull up
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	6f ef       	ldi	r22, 0xFF	; 255
    2d84:	0e 94 ac 09 	call	0x1358	; 0x1358 <DIO_voidSetPortValue>



	TIMER0_overflow_voidSetCallBack(Timer0_voidCount);  //set Timer ISR
    2d88:	86 e7       	ldi	r24, 0x76	; 118
    2d8a:	95 e1       	ldi	r25, 0x15	; 21
    2d8c:	0e 94 3b 14 	call	0x2876	; 0x2876 <TIMER0_overflow_voidSetCallBack>
	LCD_voidInit();                                     //initialize LCD
    2d90:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <LCD_voidInit>
	ADC_voidInit_interrupt();                            //initialize ADC
    2d94:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit_interrupt>
	ADC_SetCallBack (ADC_voidWarning);                  //set ADC ISR
    2d98:	82 eb       	ldi	r24, 0xB2	; 178
    2d9a:	95 e1       	ldi	r25, 0x15	; 21
    2d9c:	0e 94 10 06 	call	0xc20	; 0xc20 <ADC_SetCallBack>
	GIE_voidInit();                                     // initialize Global interrupt enable
    2da0:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GIE_voidInit>
	TIMER0_Overflow_voidInit();
    2da4:	0e 94 8b 13 	call	0x2716	; 0x2716 <TIMER0_Overflow_voidInit>


	/******************************************* PROGRAM ************************************************/

	reset:
	LCD_voidSendCMD(0x01);
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_voidSendCMD>
	LCD_voidWriteString("ENTER YOUR PASS: ");             //welcome message
    2dae:	86 e7       	ldi	r24, 0x76	; 118
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_voidWriteString>
	LCD_voidSendCMD(0xc0);
    2db6:	80 ec       	ldi	r24, 0xC0	; 192
    2db8:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_voidSendCMD>

	u8 LOCAL_u8Count=0;            //  index number of password
    2dbc:	1f a6       	std	Y+47, r1	; 0x2f
	u8 LOCAL_u8Input=0xff;
    2dbe:	8f ef       	ldi	r24, 0xFF	; 255
    2dc0:	8e a7       	std	Y+46, r24	; 0x2e
	u8 LOCAL_u8PassWord[5];        //array to store input password

	u8 LOCAL_u8Wrong = 0;         // counter for wrong password
    2dc2:	1d a6       	std	Y+45, r1	; 0x2d
	u8 LOCAL_u8Timer_flag=0;       //flag to initialize timer only on time after entering right password
    2dc4:	1c a6       	std	Y+44, r1	; 0x2c
    2dc6:	89 c0       	rjmp	.+274    	; 0x2eda <main+0x1e6>


		check:
		while (LOCAL_u8Count<5)
		{
			LOCAL_u8Input = KEYPAD_u8GetPressedKey();
    2dc8:	0e 94 fe 09 	call	0x13fc	; 0x13fc <KEYPAD_u8GetPressedKey>
    2dcc:	8e a7       	std	Y+46, r24	; 0x2e

			if (LOCAL_u8Input != 0xff)
    2dce:	8e a5       	ldd	r24, Y+46	; 0x2e
    2dd0:	8f 3f       	cpi	r24, 0xFF	; 255
    2dd2:	09 f4       	brne	.+2      	; 0x2dd6 <main+0xe2>
    2dd4:	82 c0       	rjmp	.+260    	; 0x2eda <main+0x1e6>
			{

				LCD_voidWriteChar(LOCAL_u8Input);
    2dd6:	8e a5       	ldd	r24, Y+46	; 0x2e
    2dd8:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <LCD_voidWriteChar>
				LOCAL_u8PassWord[LOCAL_u8Count]=LOCAL_u8Input;
    2ddc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dde:	28 2f       	mov	r18, r24
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	ce 01       	movw	r24, r28
    2de4:	c0 96       	adiw	r24, 0x30	; 48
    2de6:	fc 01       	movw	r30, r24
    2de8:	e2 0f       	add	r30, r18
    2dea:	f3 1f       	adc	r31, r19
    2dec:	8e a5       	ldd	r24, Y+46	; 0x2e
    2dee:	80 83       	st	Z, r24
				LOCAL_u8Count++;
    2df0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2df2:	8f 5f       	subi	r24, 0xFF	; 255
    2df4:	8f a7       	std	Y+47, r24	; 0x2f
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	aa e7       	ldi	r26, 0x7A	; 122
    2dfc:	b4 e4       	ldi	r27, 0x44	; 68
    2dfe:	8f a3       	std	Y+39, r24	; 0x27
    2e00:	98 a7       	std	Y+40, r25	; 0x28
    2e02:	a9 a7       	std	Y+41, r26	; 0x29
    2e04:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e06:	6f a1       	ldd	r22, Y+39	; 0x27
    2e08:	78 a5       	ldd	r23, Y+40	; 0x28
    2e0a:	89 a5       	ldd	r24, Y+41	; 0x29
    2e0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	4a ef       	ldi	r20, 0xFA	; 250
    2e14:	54 e4       	ldi	r21, 0x44	; 68
    2e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	8b a3       	std	Y+35, r24	; 0x23
    2e20:	9c a3       	std	Y+36, r25	; 0x24
    2e22:	ad a3       	std	Y+37, r26	; 0x25
    2e24:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e26:	6b a1       	ldd	r22, Y+35	; 0x23
    2e28:	7c a1       	ldd	r23, Y+36	; 0x24
    2e2a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e2c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	40 e8       	ldi	r20, 0x80	; 128
    2e34:	5f e3       	ldi	r21, 0x3F	; 63
    2e36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e3a:	88 23       	and	r24, r24
    2e3c:	2c f4       	brge	.+10     	; 0x2e48 <main+0x154>
		__ticks = 1;
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	9a a3       	std	Y+34, r25	; 0x22
    2e44:	89 a3       	std	Y+33, r24	; 0x21
    2e46:	3f c0       	rjmp	.+126    	; 0x2ec6 <main+0x1d2>
	else if (__tmp > 65535)
    2e48:	6b a1       	ldd	r22, Y+35	; 0x23
    2e4a:	7c a1       	ldd	r23, Y+36	; 0x24
    2e4c:	8d a1       	ldd	r24, Y+37	; 0x25
    2e4e:	9e a1       	ldd	r25, Y+38	; 0x26
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	3f ef       	ldi	r19, 0xFF	; 255
    2e54:	4f e7       	ldi	r20, 0x7F	; 127
    2e56:	57 e4       	ldi	r21, 0x47	; 71
    2e58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e5c:	18 16       	cp	r1, r24
    2e5e:	4c f5       	brge	.+82     	; 0x2eb2 <main+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e60:	6f a1       	ldd	r22, Y+39	; 0x27
    2e62:	78 a5       	ldd	r23, Y+40	; 0x28
    2e64:	89 a5       	ldd	r24, Y+41	; 0x29
    2e66:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	40 e2       	ldi	r20, 0x20	; 32
    2e6e:	51 e4       	ldi	r21, 0x41	; 65
    2e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	bc 01       	movw	r22, r24
    2e7a:	cd 01       	movw	r24, r26
    2e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	9a a3       	std	Y+34, r25	; 0x22
    2e86:	89 a3       	std	Y+33, r24	; 0x21
    2e88:	0f c0       	rjmp	.+30     	; 0x2ea8 <main+0x1b4>
    2e8a:	88 ec       	ldi	r24, 0xC8	; 200
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	98 a3       	std	Y+32, r25	; 0x20
    2e90:	8f 8f       	std	Y+31, r24	; 0x1f
    2e92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e94:	98 a1       	ldd	r25, Y+32	; 0x20
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	f1 f7       	brne	.-4      	; 0x2e96 <main+0x1a2>
    2e9a:	98 a3       	std	Y+32, r25	; 0x20
    2e9c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e9e:	89 a1       	ldd	r24, Y+33	; 0x21
    2ea0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ea2:	01 97       	sbiw	r24, 0x01	; 1
    2ea4:	9a a3       	std	Y+34, r25	; 0x22
    2ea6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea8:	89 a1       	ldd	r24, Y+33	; 0x21
    2eaa:	9a a1       	ldd	r25, Y+34	; 0x22
    2eac:	00 97       	sbiw	r24, 0x00	; 0
    2eae:	69 f7       	brne	.-38     	; 0x2e8a <main+0x196>
    2eb0:	14 c0       	rjmp	.+40     	; 0x2eda <main+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb2:	6b a1       	ldd	r22, Y+35	; 0x23
    2eb4:	7c a1       	ldd	r23, Y+36	; 0x24
    2eb6:	8d a1       	ldd	r24, Y+37	; 0x25
    2eb8:	9e a1       	ldd	r25, Y+38	; 0x26
    2eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	9a a3       	std	Y+34, r25	; 0x22
    2ec4:	89 a3       	std	Y+33, r24	; 0x21
    2ec6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ec8:	9a a1       	ldd	r25, Y+34	; 0x22
    2eca:	9e 8f       	std	Y+30, r25	; 0x1e
    2ecc:	8d 8f       	std	Y+29, r24	; 0x1d
    2ece:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ed0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ed2:	01 97       	sbiw	r24, 0x01	; 1
    2ed4:	f1 f7       	brne	.-4      	; 0x2ed2 <main+0x1de>
    2ed6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ed8:	8d 8f       	std	Y+29, r24	; 0x1d
	while(1)
	{


		check:
		while (LOCAL_u8Count<5)
    2eda:	8f a5       	ldd	r24, Y+47	; 0x2f
    2edc:	85 30       	cpi	r24, 0x05	; 5
    2ede:	08 f4       	brcc	.+2      	; 0x2ee2 <main+0x1ee>
    2ee0:	73 cf       	rjmp	.-282    	; 0x2dc8 <main+0xd4>
			}

		}


		if (LOCAL_u8PassWord[0] == '1' && LOCAL_u8PassWord[1] == '2' && LOCAL_u8PassWord[2] == '3' && LOCAL_u8PassWord[3] == '4' && LOCAL_u8PassWord[4] == '5'  )
    2ee2:	88 a9       	ldd	r24, Y+48	; 0x30
    2ee4:	81 33       	cpi	r24, 0x31	; 49
    2ee6:	09 f0       	breq	.+2      	; 0x2eea <main+0x1f6>
    2ee8:	9c c0       	rjmp	.+312    	; 0x3022 <main+0x32e>
    2eea:	89 a9       	ldd	r24, Y+49	; 0x31
    2eec:	82 33       	cpi	r24, 0x32	; 50
    2eee:	09 f0       	breq	.+2      	; 0x2ef2 <main+0x1fe>
    2ef0:	98 c0       	rjmp	.+304    	; 0x3022 <main+0x32e>
    2ef2:	8a a9       	ldd	r24, Y+50	; 0x32
    2ef4:	83 33       	cpi	r24, 0x33	; 51
    2ef6:	09 f0       	breq	.+2      	; 0x2efa <main+0x206>
    2ef8:	94 c0       	rjmp	.+296    	; 0x3022 <main+0x32e>
    2efa:	8b a9       	ldd	r24, Y+51	; 0x33
    2efc:	84 33       	cpi	r24, 0x34	; 52
    2efe:	09 f0       	breq	.+2      	; 0x2f02 <main+0x20e>
    2f00:	90 c0       	rjmp	.+288    	; 0x3022 <main+0x32e>
    2f02:	8c a9       	ldd	r24, Y+52	; 0x34
    2f04:	85 33       	cpi	r24, 0x35	; 53
    2f06:	09 f0       	breq	.+2      	; 0x2f0a <main+0x216>
    2f08:	8c c0       	rjmp	.+280    	; 0x3022 <main+0x32e>
		{

			if(LOCAL_u8Timer_flag==0)
    2f0a:	8c a5       	ldd	r24, Y+44	; 0x2c
    2f0c:	88 23       	and	r24, r24
    2f0e:	11 f4       	brne	.+4      	; 0x2f14 <main+0x220>
			{

				LOCAL_u8Timer_flag=1;
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	8c a7       	std	Y+44, r24	; 0x2c
			}


			DIO_voidSetPinValue(PORTD,PIN2,HIGH);
    2f14:	83 e0       	ldi	r24, 0x03	; 3
    2f16:	62 e0       	ldi	r22, 0x02	; 2
    2f18:	41 e0       	ldi	r20, 0x01	; 1
    2f1a:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_voidSetPinValue>
			LCD_voidSendCMD(0x01);
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_voidSendCMD>
			LCD_voidWriteString("welcome -_-");
    2f24:	88 e8       	ldi	r24, 0x88	; 136
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_voidWriteString>
			LCD_voidSendCMD(0xc0);
    2f2c:	80 ec       	ldi	r24, 0xC0	; 192
    2f2e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_voidSendCMD>
			LCD_voidWriteString("A Door Opened .");
    2f32:	84 e9       	ldi	r24, 0x94	; 148
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_voidWriteString>
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	aa ef       	ldi	r26, 0xFA	; 250
    2f40:	b3 e4       	ldi	r27, 0x43	; 67
    2f42:	89 8f       	std	Y+25, r24	; 0x19
    2f44:	9a 8f       	std	Y+26, r25	; 0x1a
    2f46:	ab 8f       	std	Y+27, r26	; 0x1b
    2f48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f4a:	69 8d       	ldd	r22, Y+25	; 0x19
    2f4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	4a ef       	ldi	r20, 0xFA	; 250
    2f58:	54 e4       	ldi	r21, 0x44	; 68
    2f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	8d 8b       	std	Y+21, r24	; 0x15
    2f64:	9e 8b       	std	Y+22, r25	; 0x16
    2f66:	af 8b       	std	Y+23, r26	; 0x17
    2f68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f6a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f6c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f6e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f70:	98 8d       	ldd	r25, Y+24	; 0x18
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	40 e8       	ldi	r20, 0x80	; 128
    2f78:	5f e3       	ldi	r21, 0x3F	; 63
    2f7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f7e:	88 23       	and	r24, r24
    2f80:	2c f4       	brge	.+10     	; 0x2f8c <main+0x298>
		__ticks = 1;
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	9c 8b       	std	Y+20, r25	; 0x14
    2f88:	8b 8b       	std	Y+19, r24	; 0x13
    2f8a:	3f c0       	rjmp	.+126    	; 0x300a <main+0x316>
	else if (__tmp > 65535)
    2f8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f90:	8f 89       	ldd	r24, Y+23	; 0x17
    2f92:	98 8d       	ldd	r25, Y+24	; 0x18
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	3f ef       	ldi	r19, 0xFF	; 255
    2f98:	4f e7       	ldi	r20, 0x7F	; 127
    2f9a:	57 e4       	ldi	r21, 0x47	; 71
    2f9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fa0:	18 16       	cp	r1, r24
    2fa2:	4c f5       	brge	.+82     	; 0x2ff6 <main+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa4:	69 8d       	ldd	r22, Y+25	; 0x19
    2fa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2faa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	40 e2       	ldi	r20, 0x20	; 32
    2fb2:	51 e4       	ldi	r21, 0x41	; 65
    2fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	bc 01       	movw	r22, r24
    2fbe:	cd 01       	movw	r24, r26
    2fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	9c 8b       	std	Y+20, r25	; 0x14
    2fca:	8b 8b       	std	Y+19, r24	; 0x13
    2fcc:	0f c0       	rjmp	.+30     	; 0x2fec <main+0x2f8>
    2fce:	88 ec       	ldi	r24, 0xC8	; 200
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	9a 8b       	std	Y+18, r25	; 0x12
    2fd4:	89 8b       	std	Y+17, r24	; 0x11
    2fd6:	89 89       	ldd	r24, Y+17	; 0x11
    2fd8:	9a 89       	ldd	r25, Y+18	; 0x12
    2fda:	01 97       	sbiw	r24, 0x01	; 1
    2fdc:	f1 f7       	brne	.-4      	; 0x2fda <main+0x2e6>
    2fde:	9a 8b       	std	Y+18, r25	; 0x12
    2fe0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe2:	8b 89       	ldd	r24, Y+19	; 0x13
    2fe4:	9c 89       	ldd	r25, Y+20	; 0x14
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	9c 8b       	std	Y+20, r25	; 0x14
    2fea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fec:	8b 89       	ldd	r24, Y+19	; 0x13
    2fee:	9c 89       	ldd	r25, Y+20	; 0x14
    2ff0:	00 97       	sbiw	r24, 0x00	; 0
    2ff2:	69 f7       	brne	.-38     	; 0x2fce <main+0x2da>
    2ff4:	14 c0       	rjmp	.+40     	; 0x301e <main+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff8:	7e 89       	ldd	r23, Y+22	; 0x16
    2ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    2ffc:	98 8d       	ldd	r25, Y+24	; 0x18
    2ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	9c 8b       	std	Y+20, r25	; 0x14
    3008:	8b 8b       	std	Y+19, r24	; 0x13
    300a:	8b 89       	ldd	r24, Y+19	; 0x13
    300c:	9c 89       	ldd	r25, Y+20	; 0x14
    300e:	98 8b       	std	Y+16, r25	; 0x10
    3010:	8f 87       	std	Y+15, r24	; 0x0f
    3012:	8f 85       	ldd	r24, Y+15	; 0x0f
    3014:	98 89       	ldd	r25, Y+16	; 0x10
    3016:	01 97       	sbiw	r24, 0x01	; 1
    3018:	f1 f7       	brne	.-4      	; 0x3016 <main+0x322>
    301a:	98 8b       	std	Y+16, r25	; 0x10
    301c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			LOCAL_u8Count=0;
    301e:	1f a6       	std	Y+47, r1	; 0x2f
    3020:	5c cf       	rjmp	.-328    	; 0x2eda <main+0x1e6>

		}


		else if (LOCAL_u8Wrong<2)
    3022:	8d a5       	ldd	r24, Y+45	; 0x2d
    3024:	82 30       	cpi	r24, 0x02	; 2
    3026:	98 f4       	brcc	.+38     	; 0x304e <main+0x35a>
		{
			LOCAL_u8Wrong++;
    3028:	8d a5       	ldd	r24, Y+45	; 0x2d
    302a:	8f 5f       	subi	r24, 0xFF	; 255
    302c:	8d a7       	std	Y+45, r24	; 0x2d
			LCD_voidSendCMD(0x01);
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_voidSendCMD>
			LCD_voidWriteString("wrong pass");
    3034:	84 ea       	ldi	r24, 0xA4	; 164
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_voidWriteString>
			LCD_voidSendCMD(0xc0);
    303c:	80 ec       	ldi	r24, 0xC0	; 192
    303e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_voidSendCMD>
			LCD_voidWriteString("try again:");
    3042:	8f ea       	ldi	r24, 0xAF	; 175
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_voidWriteString>
			LOCAL_u8Count=0;
    304a:	1f a6       	std	Y+47, r1	; 0x2f
    304c:	46 cf       	rjmp	.-372    	; 0x2eda <main+0x1e6>

		}

		else
		{
			LCD_voidSendCMD(0x01);
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_voidSendCMD>
			LCD_voidWriteString("not allowed");
    3054:	8a eb       	ldi	r24, 0xBA	; 186
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_voidWriteString>
			for(u8 x =0 ;x<12 ;x++)
    305c:	1b a6       	std	Y+43, r1	; 0x2b
    305e:	75 c0       	rjmp	.+234    	; 0x314a <main+0x456>
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	90 e4       	ldi	r25, 0x40	; 64
    3064:	ac e9       	ldi	r26, 0x9C	; 156
    3066:	b5 e4       	ldi	r27, 0x45	; 69
    3068:	8b 87       	std	Y+11, r24	; 0x0b
    306a:	9c 87       	std	Y+12, r25	; 0x0c
    306c:	ad 87       	std	Y+13, r26	; 0x0d
    306e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3070:	6b 85       	ldd	r22, Y+11	; 0x0b
    3072:	7c 85       	ldd	r23, Y+12	; 0x0c
    3074:	8d 85       	ldd	r24, Y+13	; 0x0d
    3076:	9e 85       	ldd	r25, Y+14	; 0x0e
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	4a ef       	ldi	r20, 0xFA	; 250
    307e:	54 e4       	ldi	r21, 0x44	; 68
    3080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	8f 83       	std	Y+7, r24	; 0x07
    308a:	98 87       	std	Y+8, r25	; 0x08
    308c:	a9 87       	std	Y+9, r26	; 0x09
    308e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3090:	6f 81       	ldd	r22, Y+7	; 0x07
    3092:	78 85       	ldd	r23, Y+8	; 0x08
    3094:	89 85       	ldd	r24, Y+9	; 0x09
    3096:	9a 85       	ldd	r25, Y+10	; 0x0a
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	40 e8       	ldi	r20, 0x80	; 128
    309e:	5f e3       	ldi	r21, 0x3F	; 63
    30a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30a4:	88 23       	and	r24, r24
    30a6:	2c f4       	brge	.+10     	; 0x30b2 <main+0x3be>
		__ticks = 1;
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	9e 83       	std	Y+6, r25	; 0x06
    30ae:	8d 83       	std	Y+5, r24	; 0x05
    30b0:	3f c0       	rjmp	.+126    	; 0x3130 <main+0x43c>
	else if (__tmp > 65535)
    30b2:	6f 81       	ldd	r22, Y+7	; 0x07
    30b4:	78 85       	ldd	r23, Y+8	; 0x08
    30b6:	89 85       	ldd	r24, Y+9	; 0x09
    30b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	3f ef       	ldi	r19, 0xFF	; 255
    30be:	4f e7       	ldi	r20, 0x7F	; 127
    30c0:	57 e4       	ldi	r21, 0x47	; 71
    30c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30c6:	18 16       	cp	r1, r24
    30c8:	4c f5       	brge	.+82     	; 0x311c <main+0x428>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    30cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    30d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	40 e2       	ldi	r20, 0x20	; 32
    30d8:	51 e4       	ldi	r21, 0x41	; 65
    30da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	bc 01       	movw	r22, r24
    30e4:	cd 01       	movw	r24, r26
    30e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	9e 83       	std	Y+6, r25	; 0x06
    30f0:	8d 83       	std	Y+5, r24	; 0x05
    30f2:	0f c0       	rjmp	.+30     	; 0x3112 <main+0x41e>
    30f4:	88 ec       	ldi	r24, 0xC8	; 200
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	9c 83       	std	Y+4, r25	; 0x04
    30fa:	8b 83       	std	Y+3, r24	; 0x03
    30fc:	8b 81       	ldd	r24, Y+3	; 0x03
    30fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3100:	01 97       	sbiw	r24, 0x01	; 1
    3102:	f1 f7       	brne	.-4      	; 0x3100 <main+0x40c>
    3104:	9c 83       	std	Y+4, r25	; 0x04
    3106:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3108:	8d 81       	ldd	r24, Y+5	; 0x05
    310a:	9e 81       	ldd	r25, Y+6	; 0x06
    310c:	01 97       	sbiw	r24, 0x01	; 1
    310e:	9e 83       	std	Y+6, r25	; 0x06
    3110:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3112:	8d 81       	ldd	r24, Y+5	; 0x05
    3114:	9e 81       	ldd	r25, Y+6	; 0x06
    3116:	00 97       	sbiw	r24, 0x00	; 0
    3118:	69 f7       	brne	.-38     	; 0x30f4 <main+0x400>
    311a:	14 c0       	rjmp	.+40     	; 0x3144 <main+0x450>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    311c:	6f 81       	ldd	r22, Y+7	; 0x07
    311e:	78 85       	ldd	r23, Y+8	; 0x08
    3120:	89 85       	ldd	r24, Y+9	; 0x09
    3122:	9a 85       	ldd	r25, Y+10	; 0x0a
    3124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3128:	dc 01       	movw	r26, r24
    312a:	cb 01       	movw	r24, r22
    312c:	9e 83       	std	Y+6, r25	; 0x06
    312e:	8d 83       	std	Y+5, r24	; 0x05
    3130:	8d 81       	ldd	r24, Y+5	; 0x05
    3132:	9e 81       	ldd	r25, Y+6	; 0x06
    3134:	9a 83       	std	Y+2, r25	; 0x02
    3136:	89 83       	std	Y+1, r24	; 0x01
    3138:	89 81       	ldd	r24, Y+1	; 0x01
    313a:	9a 81       	ldd	r25, Y+2	; 0x02
    313c:	01 97       	sbiw	r24, 0x01	; 1
    313e:	f1 f7       	brne	.-4      	; 0x313c <main+0x448>
    3140:	9a 83       	std	Y+2, r25	; 0x02
    3142:	89 83       	std	Y+1, r24	; 0x01
    3144:	8b a5       	ldd	r24, Y+43	; 0x2b
    3146:	8f 5f       	subi	r24, 0xFF	; 255
    3148:	8b a7       	std	Y+43, r24	; 0x2b
    314a:	8b a5       	ldd	r24, Y+43	; 0x2b
    314c:	8c 30       	cpi	r24, 0x0C	; 12
    314e:	08 f4       	brcc	.+2      	; 0x3152 <main+0x45e>
    3150:	87 cf       	rjmp	.-242    	; 0x3060 <main+0x36c>
    3152:	2a ce       	rjmp	.-940    	; 0x2da8 <main+0xb4>

00003154 <__mulsi3>:
    3154:	62 9f       	mul	r22, r18
    3156:	d0 01       	movw	r26, r0
    3158:	73 9f       	mul	r23, r19
    315a:	f0 01       	movw	r30, r0
    315c:	82 9f       	mul	r24, r18
    315e:	e0 0d       	add	r30, r0
    3160:	f1 1d       	adc	r31, r1
    3162:	64 9f       	mul	r22, r20
    3164:	e0 0d       	add	r30, r0
    3166:	f1 1d       	adc	r31, r1
    3168:	92 9f       	mul	r25, r18
    316a:	f0 0d       	add	r31, r0
    316c:	83 9f       	mul	r24, r19
    316e:	f0 0d       	add	r31, r0
    3170:	74 9f       	mul	r23, r20
    3172:	f0 0d       	add	r31, r0
    3174:	65 9f       	mul	r22, r21
    3176:	f0 0d       	add	r31, r0
    3178:	99 27       	eor	r25, r25
    317a:	72 9f       	mul	r23, r18
    317c:	b0 0d       	add	r27, r0
    317e:	e1 1d       	adc	r30, r1
    3180:	f9 1f       	adc	r31, r25
    3182:	63 9f       	mul	r22, r19
    3184:	b0 0d       	add	r27, r0
    3186:	e1 1d       	adc	r30, r1
    3188:	f9 1f       	adc	r31, r25
    318a:	bd 01       	movw	r22, r26
    318c:	cf 01       	movw	r24, r30
    318e:	11 24       	eor	r1, r1
    3190:	08 95       	ret

00003192 <__udivmodhi4>:
    3192:	aa 1b       	sub	r26, r26
    3194:	bb 1b       	sub	r27, r27
    3196:	51 e1       	ldi	r21, 0x11	; 17
    3198:	07 c0       	rjmp	.+14     	; 0x31a8 <__udivmodhi4_ep>

0000319a <__udivmodhi4_loop>:
    319a:	aa 1f       	adc	r26, r26
    319c:	bb 1f       	adc	r27, r27
    319e:	a6 17       	cp	r26, r22
    31a0:	b7 07       	cpc	r27, r23
    31a2:	10 f0       	brcs	.+4      	; 0x31a8 <__udivmodhi4_ep>
    31a4:	a6 1b       	sub	r26, r22
    31a6:	b7 0b       	sbc	r27, r23

000031a8 <__udivmodhi4_ep>:
    31a8:	88 1f       	adc	r24, r24
    31aa:	99 1f       	adc	r25, r25
    31ac:	5a 95       	dec	r21
    31ae:	a9 f7       	brne	.-22     	; 0x319a <__udivmodhi4_loop>
    31b0:	80 95       	com	r24
    31b2:	90 95       	com	r25
    31b4:	bc 01       	movw	r22, r24
    31b6:	cd 01       	movw	r24, r26
    31b8:	08 95       	ret

000031ba <__udivmodsi4>:
    31ba:	a1 e2       	ldi	r26, 0x21	; 33
    31bc:	1a 2e       	mov	r1, r26
    31be:	aa 1b       	sub	r26, r26
    31c0:	bb 1b       	sub	r27, r27
    31c2:	fd 01       	movw	r30, r26
    31c4:	0d c0       	rjmp	.+26     	; 0x31e0 <__udivmodsi4_ep>

000031c6 <__udivmodsi4_loop>:
    31c6:	aa 1f       	adc	r26, r26
    31c8:	bb 1f       	adc	r27, r27
    31ca:	ee 1f       	adc	r30, r30
    31cc:	ff 1f       	adc	r31, r31
    31ce:	a2 17       	cp	r26, r18
    31d0:	b3 07       	cpc	r27, r19
    31d2:	e4 07       	cpc	r30, r20
    31d4:	f5 07       	cpc	r31, r21
    31d6:	20 f0       	brcs	.+8      	; 0x31e0 <__udivmodsi4_ep>
    31d8:	a2 1b       	sub	r26, r18
    31da:	b3 0b       	sbc	r27, r19
    31dc:	e4 0b       	sbc	r30, r20
    31de:	f5 0b       	sbc	r31, r21

000031e0 <__udivmodsi4_ep>:
    31e0:	66 1f       	adc	r22, r22
    31e2:	77 1f       	adc	r23, r23
    31e4:	88 1f       	adc	r24, r24
    31e6:	99 1f       	adc	r25, r25
    31e8:	1a 94       	dec	r1
    31ea:	69 f7       	brne	.-38     	; 0x31c6 <__udivmodsi4_loop>
    31ec:	60 95       	com	r22
    31ee:	70 95       	com	r23
    31f0:	80 95       	com	r24
    31f2:	90 95       	com	r25
    31f4:	9b 01       	movw	r18, r22
    31f6:	ac 01       	movw	r20, r24
    31f8:	bd 01       	movw	r22, r26
    31fa:	cf 01       	movw	r24, r30
    31fc:	08 95       	ret

000031fe <__prologue_saves__>:
    31fe:	2f 92       	push	r2
    3200:	3f 92       	push	r3
    3202:	4f 92       	push	r4
    3204:	5f 92       	push	r5
    3206:	6f 92       	push	r6
    3208:	7f 92       	push	r7
    320a:	8f 92       	push	r8
    320c:	9f 92       	push	r9
    320e:	af 92       	push	r10
    3210:	bf 92       	push	r11
    3212:	cf 92       	push	r12
    3214:	df 92       	push	r13
    3216:	ef 92       	push	r14
    3218:	ff 92       	push	r15
    321a:	0f 93       	push	r16
    321c:	1f 93       	push	r17
    321e:	cf 93       	push	r28
    3220:	df 93       	push	r29
    3222:	cd b7       	in	r28, 0x3d	; 61
    3224:	de b7       	in	r29, 0x3e	; 62
    3226:	ca 1b       	sub	r28, r26
    3228:	db 0b       	sbc	r29, r27
    322a:	0f b6       	in	r0, 0x3f	; 63
    322c:	f8 94       	cli
    322e:	de bf       	out	0x3e, r29	; 62
    3230:	0f be       	out	0x3f, r0	; 63
    3232:	cd bf       	out	0x3d, r28	; 61
    3234:	09 94       	ijmp

00003236 <__epilogue_restores__>:
    3236:	2a 88       	ldd	r2, Y+18	; 0x12
    3238:	39 88       	ldd	r3, Y+17	; 0x11
    323a:	48 88       	ldd	r4, Y+16	; 0x10
    323c:	5f 84       	ldd	r5, Y+15	; 0x0f
    323e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3240:	7d 84       	ldd	r7, Y+13	; 0x0d
    3242:	8c 84       	ldd	r8, Y+12	; 0x0c
    3244:	9b 84       	ldd	r9, Y+11	; 0x0b
    3246:	aa 84       	ldd	r10, Y+10	; 0x0a
    3248:	b9 84       	ldd	r11, Y+9	; 0x09
    324a:	c8 84       	ldd	r12, Y+8	; 0x08
    324c:	df 80       	ldd	r13, Y+7	; 0x07
    324e:	ee 80       	ldd	r14, Y+6	; 0x06
    3250:	fd 80       	ldd	r15, Y+5	; 0x05
    3252:	0c 81       	ldd	r16, Y+4	; 0x04
    3254:	1b 81       	ldd	r17, Y+3	; 0x03
    3256:	aa 81       	ldd	r26, Y+2	; 0x02
    3258:	b9 81       	ldd	r27, Y+1	; 0x01
    325a:	ce 0f       	add	r28, r30
    325c:	d1 1d       	adc	r29, r1
    325e:	0f b6       	in	r0, 0x3f	; 63
    3260:	f8 94       	cli
    3262:	de bf       	out	0x3e, r29	; 62
    3264:	0f be       	out	0x3f, r0	; 63
    3266:	cd bf       	out	0x3d, r28	; 61
    3268:	ed 01       	movw	r28, r26
    326a:	08 95       	ret

0000326c <_exit>:
    326c:	f8 94       	cli

0000326e <__stop_program>:
    326e:	ff cf       	rjmp	.-2      	; 0x326e <__stop_program>
